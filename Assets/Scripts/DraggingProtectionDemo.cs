using UnityEngine;

public class DraggingProtectionDemo : MonoBehaviour
{
    [Header("–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –∑–∞—â–∏—Ç—ã –æ—Ç —É–¥–∞–ª–µ–Ω–∏—è –ø—Ä–∏ –ø–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–Ω–∏–∏")]
    public PrefabSpawner spawner;
    public GameObject testPrefab;
    
    void Start()
    {
        if (spawner == null)
        {
            spawner = FindObjectOfType<PrefabSpawner>();
        }
        
        if (spawner == null)
        {
            Debug.LogError("PrefabSpawner –Ω–µ –Ω–∞–π–¥–µ–Ω!");
            enabled = false;
            return;
        }
        
        // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º spawner –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
        spawner.SetDraggingProtection(true);
        spawner.SetDropZoneProtection(true);
        spawner.SetAutoCleanup(true);
        spawner.SetObjectLifetime(5f);
        
        Debug.Log("=== –î–ï–ú–û–ù–°–¢–†–ê–¶–ò–Ø –ó–ê–©–ò–¢–´ –û–¢ –£–î–ê–õ–ï–ù–ò–Ø –ü–†–ò –ü–ï–†–ï–¢–ê–°–ö–ò–í–ê–ù–ò–ò ===");
        Debug.Log("1. –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π –æ–±—ä–µ–∫—Ç");
        CreateTestObject();
        
        Debug.Log("2. –û–±—ä–µ–∫—Ç –±—É–¥–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —É–¥–∞–ª–µ–Ω —á–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥, –ï–°–õ–ò –æ–Ω –Ω–µ –ø–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–µ—Ç—Å—è –ò –Ω–µ –≤ drop zone");
        Debug.Log("3. –ù–∞–∂–º–∏—Ç–µ –ü–†–û–ë–ï–õ –¥–ª—è —Å–∏–º—É–ª—è—Ü–∏–∏ –≤–∑—è—Ç–∏—è –æ–±—ä–µ–∫—Ç–∞ (–∑–∞—â–∏—Ç–∞ –æ—Ç —É–¥–∞–ª–µ–Ω–∏—è)");
        Debug.Log("4. –ù–∞–∂–º–∏—Ç–µ R –¥–ª—è —Å–∏–º—É–ª—è—Ü–∏–∏ –æ—Ç–ø—É—Å–∫–∞–Ω–∏—è –æ–±—ä–µ–∫—Ç–∞ (–º–æ–∂–Ω–æ —É–¥–∞–ª–∏—Ç—å)");
        Debug.Log("5. –ù–∞–∂–º–∏—Ç–µ D –¥–ª—è —Å–∏–º—É–ª—è—Ü–∏–∏ –ø–æ–º–µ—â–µ–Ω–∏—è –≤ drop zone (–∑–∞—â–∏—Ç–∞ –æ—Ç —É–¥–∞–ª–µ–Ω–∏—è)");
        Debug.Log("6. –ù–∞–∂–º–∏—Ç–µ F –¥–ª—è —Å–∏–º—É–ª—è—Ü–∏–∏ –≤—ã—Ö–æ–¥–∞ –∏–∑ drop zone (–º–æ–∂–Ω–æ —É–¥–∞–ª–∏—Ç—å)");
        Debug.Log("7. –ù–∞–∂–º–∏—Ç–µ T –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ –æ–±—ä–µ–∫—Ç–∞");
    }
    
    void Update()
    {
        if (spawner == null) return;
        
        // –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–∏–º—É–ª—è—Ü–∏–µ–π –ø–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–Ω–∏—è
        if (Input.GetKeyDown(KeyCode.Space))
        {
            SimulateObjectPickup();
        }
        
        if (Input.GetKeyDown(KeyCode.R))
        {
            SimulateObjectDrop();
        }
        
        if (Input.GetKeyDown(KeyCode.D))
        {
            SimulateObjectInDropZone();
        }
        
        if (Input.GetKeyDown(KeyCode.F))
        {
            SimulateObjectOutOfDropZone();
        }
        
        if (Input.GetKeyDown(KeyCode.T))
        {
            CreateTestObject();
        }
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∫–∞–∂–¥—ã–µ 2 —Å–µ–∫—É–Ω–¥—ã
        if (Time.frameCount % 120 == 0) // –ü—Ä–∏–º–µ—Ä–Ω–æ –∫–∞–∂–¥—ã–µ 2 —Å–µ–∫—É–Ω–¥—ã –ø—Ä–∏ 60 FPS
        {
            int draggedCount = spawner.GetDraggedObjectsCount();
            int inDropZoneCount = spawner.GetObjectsInDropZoneCount();
            int totalCount = spawner.GetSpawnedObjectsCount();
            Debug.Log($"–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: –í—Å–µ–≥–æ –æ–±—ä–µ–∫—Ç–æ–≤: {totalCount}, –ü–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–µ–º—ã—Ö: {draggedCount}, –í drop zone: {inDropZoneCount}");
        }
    }
    
    void CreateTestObject()
    {
        if (testPrefab != null)
        {
            GameObject testObj = Instantiate(testPrefab, transform.position, Quaternion.identity);
            testObj.name = "DraggingTestObject";
            spawner.SpawnPrefabAtPosition(testObj.transform.position);
        }
        else
        {
            // –°–æ–∑–¥–∞–µ–º –ø—Ä–æ—Å—Ç–æ–π –∫—É–± –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
            GameObject testObj = GameObject.CreatePrimitive(PrimitiveType.Cube);
            testObj.transform.position = transform.position;
            testObj.name = "DraggingTestCube";
            spawner.SpawnPrefabAtPosition(testObj.transform.position);
        }
        
        Debug.Log("‚úÖ –°–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π —Ç–µ—Å—Ç–æ–≤—ã–π –æ–±—ä–µ–∫—Ç");
    }
    
    void SimulateObjectPickup()
    {
        // –ù–∞—Ö–æ–¥–∏–º –ø–æ—Å–ª–µ–¥–Ω–∏–π —Å–æ–∑–¥–∞–Ω–Ω—ã–π –æ–±—ä–µ–∫—Ç
        var spawnedObjects = FindObjectsOfType<GameObject>();
        GameObject lastObject = null;
        
        foreach (var obj in spawnedObjects)
        {
            if (obj.name.Contains("DraggingTest"))
            {
                lastObject = obj;
            }
        }
        
        if (lastObject != null)
        {
            spawner.MarkObjectAsDragging(lastObject);
            Debug.Log("üîÑ –û–ë–™–ï–ö–¢ –í–ó–Ø–¢ –î–õ–Ø –ü–ï–†–ï–¢–ê–°–ö–ò–í–ê–ù–ò–Ø - –æ–Ω –ù–ï –±—É–¥–µ—Ç —É–¥–∞–ª–µ–Ω –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏!");
        }
        else
        {
            Debug.LogWarning("–ù–µ—Ç –æ–±—ä–µ–∫—Ç–æ–≤ –¥–ª—è –≤–∑—è—Ç–∏—è!");
        }
    }
    
    void SimulateObjectDrop()
    {
        // –ù–∞—Ö–æ–¥–∏–º –ø–æ—Å–ª–µ–¥–Ω–∏–π —Å–æ–∑–¥–∞–Ω–Ω—ã–π –æ–±—ä–µ–∫—Ç
        var spawnedObjects = FindObjectsOfType<GameObject>();
        GameObject lastObject = null;
        
        foreach (var obj in spawnedObjects)
        {
            if (obj.name.Contains("DraggingTest"))
            {
                lastObject = obj;
            }
        }
        
        if (lastObject != null)
        {
            spawner.MarkObjectAsDropped(lastObject);
            Debug.Log("‚èπÔ∏è –û–ë–™–ï–ö–¢ –û–¢–ü–£–©–ï–ù - —Ç–µ–ø–µ—Ä—å –æ–Ω –º–æ–∂–µ—Ç –±—ã—Ç—å —É–¥–∞–ª–µ–Ω –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏");
        }
        else
        {
            Debug.LogWarning("–ù–µ—Ç –æ–±—ä–µ–∫—Ç–æ–≤ –¥–ª—è –æ—Ç–ø—É—Å–∫–∞–Ω–∏—è!");
        }
    }
    
    [ContextMenu("–°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π —Ç–µ—Å—Ç–æ–≤—ã–π –æ–±—ä–µ–∫—Ç")]
    public void CreateNewTestObject()
    {
        CreateTestObject();
    }
    
    [ContextMenu("–°–∏–º—É–ª–∏—Ä–æ–≤–∞—Ç—å –≤–∑—è—Ç–∏–µ –æ–±—ä–µ–∫—Ç–∞")]
    public void SimulatePickupFromMenu()
    {
        SimulateObjectPickup();
    }
    
    [ContextMenu("–°–∏–º—É–ª–∏—Ä–æ–≤–∞—Ç—å –æ—Ç–ø—É—Å–∫–∞–Ω–∏–µ –æ–±—ä–µ–∫—Ç–∞")]
    public void SimulateDropFromMenu()
    {
        SimulateObjectDrop();
    }
    
    void SimulateObjectInDropZone()
    {
        // –ù–∞—Ö–æ–¥–∏–º –ø–æ—Å–ª–µ–¥–Ω–∏–π —Å–æ–∑–¥–∞–Ω–Ω—ã–π –æ–±—ä–µ–∫—Ç
        var spawnedObjects = FindObjectsOfType<GameObject>();
        GameObject lastObject = null;
        
        foreach (var obj in spawnedObjects)
        {
            if (obj.name.Contains("DraggingTest"))
            {
                lastObject = obj;
            }
        }
        
        if (lastObject != null)
        {
            spawner.MarkObjectAsInDropZone(lastObject);
            Debug.Log("üè† –û–ë–™–ï–ö–¢ –ü–û–ú–ï–©–ï–ù –í DROP ZONE - –æ–Ω –ù–ï –±—É–¥–µ—Ç —É–¥–∞–ª–µ–Ω –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏!");
        }
        else
        {
            Debug.LogWarning("–ù–µ—Ç –æ–±—ä–µ–∫—Ç–æ–≤ –¥–ª—è –ø–æ–º–µ—â–µ–Ω–∏—è –≤ drop zone!");
        }
    }
    
    void SimulateObjectOutOfDropZone()
    {
        // –ù–∞—Ö–æ–¥–∏–º –ø–æ—Å–ª–µ–¥–Ω–∏–π —Å–æ–∑–¥–∞–Ω–Ω—ã–π –æ–±—ä–µ–∫—Ç
        var spawnedObjects = FindObjectsOfType<GameObject>();
        GameObject lastObject = null;
        
        foreach (var obj in spawnedObjects)
        {
            if (obj.name.Contains("DraggingTest"))
            {
                lastObject = obj;
            }
        }
        
        if (lastObject != null)
        {
            spawner.MarkObjectAsOutOfDropZone(lastObject);
            Debug.Log("üö™ –û–ë–™–ï–ö–¢ –í–´–ù–ï–°–ï–ù –ò–ó DROP ZONE - —Ç–µ–ø–µ—Ä—å –æ–Ω –º–æ–∂–µ—Ç –±—ã—Ç—å —É–¥–∞–ª–µ–Ω –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏");
        }
        else
        {
            Debug.LogWarning("–ù–µ—Ç –æ–±—ä–µ–∫—Ç–æ–≤ –¥–ª—è –≤—ã–Ω–µ—Å–µ–Ω–∏—è –∏–∑ drop zone!");
        }
    }
    
    [ContextMenu("–°–∏–º—É–ª–∏—Ä–æ–≤–∞—Ç—å –ø–æ–º–µ—â–µ–Ω–∏–µ –≤ drop zone")]
    public void SimulateInDropZoneFromMenu()
    {
        SimulateObjectInDropZone();
    }
    
    [ContextMenu("–°–∏–º—É–ª–∏—Ä–æ–≤–∞—Ç—å –≤—ã—Ö–æ–¥ –∏–∑ drop zone")]
    public void SimulateOutOfDropZoneFromMenu()
    {
        SimulateObjectOutOfDropZone();
    }
    
    [ContextMenu("–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É")]
    public void ShowStats()
    {
        if (spawner != null)
        {
            int draggedCount = spawner.GetDraggedObjectsCount();
            int inDropZoneCount = spawner.GetObjectsInDropZoneCount();
            int totalCount = spawner.GetSpawnedObjectsCount();
            Debug.Log($"–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: –í—Å–µ–≥–æ –æ–±—ä–µ–∫—Ç–æ–≤: {totalCount}, –ü–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–µ–º—ã—Ö: {draggedCount}, –í drop zone: {inDropZoneCount}");
        }
    }
}
