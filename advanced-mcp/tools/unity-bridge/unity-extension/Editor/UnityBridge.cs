using System;
using System.Collections.Generic;
using System.Threading;
using UnityEngine;
using UnityEditor;

namespace UnityBridge
{
    /// <summary>
    /// –ì–ª–∞–≤–Ω—ã–π –∫–æ–º–ø–æ–∑–∏—Ç–æ—Ä Unity Bridge - –Ω–æ–≤–∞—è —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–∞—è –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞
    /// –û–±—ä–µ–¥–∏–Ω—è–µ—Ç –≤—Å–µ –º–æ–¥—É–ª–∏ –≤ –µ–¥–∏–Ω—ã–π –ø–∞–π–ø–ª–∞–π–Ω –æ–±—Ä–∞–±–æ—Ç–∫–∏
    /// –ó–∞–º–µ–Ω—è–µ—Ç —Å–ª–æ–∂–Ω—ã–π UnityBridgeAPI
    /// </summary>
    public static class UnityBridge
    {
        private static HttpServer server;
        private static readonly Queue<Action> mainThreadQueue = new Queue<Action>();
        private static readonly object queueLock = new object();
        private static readonly Dictionary<string, object> pendingResults = new Dictionary<string, object>();
        private static readonly object resultsLock = new object();
        
        static UnityBridge()
        {
            EditorApplication.update += ProcessMainThreadQueue;
        }
        
        public static bool StartServer(int port = 7777)
        {
            try
            {
                // üöÄ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ UTF-8 –∫–æ–¥–∏—Ä–æ–≤–∫–∏ –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –∫–∏—Ä–∏–ª–ª–∏—Ü—ã
                try
                {
                    System.Console.OutputEncoding = System.Text.Encoding.UTF8;
                }
                catch
                {
                    // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–æ–¥–∏—Ä–æ–≤–∫–∏ –∫–æ–Ω—Å–æ–ª–∏
                }
                
                ErrorCollector.AddInfo("Starting Unity Bridge...");
                
                server = new HttpServer(port, HandleRequest);
                var started = server.Start();
                
                if (started)
                    ErrorCollector.AddInfo($"Unity Bridge started on port {port}");
                else
                    ErrorCollector.AddError("Failed to start Unity Bridge server");
                    
                return started;
            }
            catch (Exception ex)
            {
                ErrorCollector.AddError($"Unity Bridge startup error: {ex.Message}");
                Debug.LogError($"Unity Bridge startup error: {ex}");
                return false;
            }
        }
        
        public static void StopServer()
        {
            try
            {
                server?.Stop();
                server = null;
                ErrorCollector.AddInfo("Unity Bridge stopped");
            }
            catch (Exception ex)
            {
                ErrorCollector.AddError($"Unity Bridge stop error: {ex.Message}");
                Debug.LogError($"Unity Bridge stop error: {ex}");
            }
        }
        
        public static bool IsRunning => server != null;
        
        // –ì–ª–∞–≤–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–ø—Ä–æ—Å–æ–≤ (—Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π –ø–∞–π–ø–ª–∞–π–Ω)
        private static Dictionary<string, object> HandleRequest(string endpoint, Dictionary<string, object> data)
        {
            try
            {
                // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–º–ø–∏–ª—è—Ü–∏–∏
                var compilationError = ErrorCollector.GetCompilationStatus();
                if (!string.IsNullOrEmpty(compilationError))
                    return ResponseBuilder.BuildCompilationErrorResponse();
                
                // –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–∞
                var request = new UnityRequest(endpoint, data);
                
                // –ú–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü–∏—è –∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ
                var result = RouteRequest(request);
                
                // –ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞
                return ResponseBuilder.BuildResponse(result);
            }
            catch (Exception ex)
            {
                ErrorCollector.AddError($"Request handling error: {ex.Message}");
                return ResponseBuilder.BuildErrorResponse($"Request failed: {ex.Message}");
            }
        }
        
        // –§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–∞—è –º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü–∏—è –∑–∞–ø—Ä–æ—Å–æ–≤
        private static OperationResult RouteRequest(UnityRequest request)
        {
            switch (request.Endpoint)
            {
                case "/api/screenshot":
                    return ExecuteOnMainThread(() => UnityOperations.TakeScreenshot(request));
                    
                case "/api/camera_screenshot":
                    return ExecuteOnMainThread(() => UnityOperations.TakeCameraScreenshot(request));
                    
                case "/api/execute":
                    return ExecuteOnMainThread(() => UnityOperations.ExecuteCode(request));
                    
                case "/api/scene_hierarchy":
                    return ExecuteOnMainThread(() => UnityOperations.GetSceneHierarchy(request));
                    
                case "/api/add_component":
                    return ExecuteOnMainThread(() => UnityOperations.AddComponent(request));
                    
                case "/api/create_and_add_script":
                    return ExecuteOnMainThread(() => UnityOperations.CreateAndAddScript(request));
                    
                case "/api/create_prefab":
                    return ExecuteOnMainThread(() => UnityOperations.CreatePrefab(request));
                    
                case "/api/instantiate_prefab":
                    return ExecuteOnMainThread(() => UnityOperations.InstantiatePrefab(request));
                    
                case "/api/list_prefabs":
                    return ExecuteOnMainThread(() => UnityOperations.ListPrefabs(request));
                    
                // Canvas Management
                case "/api/create_canvas":
                    return ExecuteOnMainThread(() => UnityOperations.CreateCanvas(request));
                    
                // UI Elements
                case "/api/create_ui_element":
                    return ExecuteOnMainThread(() => UnityOperationsExtended.CreateUIElement(request));
                case "/api/set_ui_properties":
                    return ExecuteOnMainThread(() => UnityOperationsExtended.SetUIProperties(request));
                case "/api/list_ui_elements":
                    return ExecuteOnMainThread(() => UnityOperationsExtended.ListUIElements(request));
                    
                // Advanced Prefab Management
                case "/api/create_prefab_from_selection":
                    return ExecuteOnMainThread(() => UnityOperationsExtended.CreatePrefabFromSelection(request));
                case "/api/update_prefab":
                    return ExecuteOnMainThread(() => UnityOperationsExtended.UpdatePrefab(request));
                    
                // Advanced Script Management
                case "/api/create_script_template":
                    return ExecuteOnMainThread(() => UnityOperationsExtended.CreateScriptTemplate(request));
                case "/api/add_component_to_all":
                    return ExecuteOnMainThread(() => UnityOperationsExtended.AddComponentToAll(request));
                    
                // Scene Management
                case "/api/create_empty_scene":
                    return ExecuteOnMainThread(() => UnityOperationsExtended.CreateEmptyScene(request));
                case "/api/load_scene":
                    return ExecuteOnMainThread(() => UnityOperationsExtended.LoadScene(request));
                case "/api/save_scene":
                    return ExecuteOnMainThread(() => UnityOperationsExtended.SaveScene(request));
                    
                default:
                    return OperationResult.Fail($"Unknown endpoint: {request.Endpoint}");
            }
        }
        
        // –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –Ω–∞ –≥–ª–∞–≤–Ω–æ–º –ø–æ—Ç–æ–∫–µ Unity
        private static OperationResult ExecuteOnMainThread(Func<OperationResult> operation)
        {
            if (IsMainThread())
                return operation();
            
            var taskId = Guid.NewGuid().ToString();
            var completed = false;
            OperationResult result = default;
            
            EnqueueMainThreadTask(() =>
            {
                try
                {
                    result = operation();
                }
                catch (Exception ex)
                {
                    result = OperationResult.Fail($"Main thread execution error: {ex.Message}");
                }
                finally
                {
                    completed = true;
                }
            });
            
            // –û–∂–∏–¥–∞–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
            var timeout = DateTime.UtcNow.AddSeconds(30);
            while (!completed && DateTime.UtcNow < timeout)
            {
                Thread.Sleep(50);
            }
            
            if (!completed)
                return OperationResult.Fail("Operation timed out");
                
            return result;
        }
        
        private static void EnqueueMainThreadTask(Action action)
        {
            lock (queueLock)
            {
                mainThreadQueue.Enqueue(action);
            }
        }
        
        private static void ProcessMainThreadQueue()
        {
            lock (queueLock)
            {
                var processedCount = 0;
                while (mainThreadQueue.Count > 0 && processedCount < 10) // –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –¥–ª—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
                {
                    try
                    {
                        var action = mainThreadQueue.Dequeue();
                        action();
                        processedCount++;
                    }
                    catch (Exception ex)
                    {
                        Debug.LogError($"Main thread task error: {ex.Message}");
                    }
                }
            }
        }
        
        private static bool IsMainThread()
        {
            return Thread.CurrentThread.ManagedThreadId == 1; // Unity main thread –æ–±—ã—á–Ω–æ –∏–º–µ–µ—Ç ID 1
        }
        
        // –£—Ç–∏–ª–∏—Ç–∞—Ä–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
        public static string GetStatus()
        {
            var status = IsRunning ? "Running" : "Stopped";
            var errors = ErrorCollector.HasErrors() ? $" ({ErrorCollector.GetAndClearErrors().Count} errors)" : "";
            var compilation = ErrorCollector.HasCompilationErrors() ? " [COMPILATION ERRORS]" : "";
            
            return $"Unity Bridge: {status}{errors}{compilation}";
        }
        
        public static void LogInfo(string message)
        {
            ErrorCollector.AddInfo(message);
            Debug.Log($"[Unity Bridge] {message}");
        }
        
        public static void LogError(string message)
        {
            ErrorCollector.AddError(message);
            Debug.LogError($"[Unity Bridge] {message}");
        }
    }
} 