/**
 * Unity Bridge MCP Module - –ü—Ä–æ–∑—Ä–∞—á–Ω—ã–π –º–æ—Å—Ç
 * 
 * –ù–æ–≤–∞—è —É–ø—Ä–æ—â–µ–Ω–Ω–∞—è –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞:
 * ‚Ä¢ Unity –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≥–æ—Ç–æ–≤—ã–π –º–∞—Å—Å–∏–≤ messages
 * ‚Ä¢ JS –ø—Ä–æ—Å—Ç–æ –ø–µ—Ä–µ–¥–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –±–µ–∑ –æ–±—Ä–∞–±–æ—Ç–∫–∏
 * ‚Ä¢ –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –ø—Ä–æ–∑—Ä–∞—á–Ω–æ—Å—Ç—å —Å–≤—è–∑–∏
 */

import axios from 'axios';

const UNITY_BASE_URL = 'http://localhost:7777';

/**
 * –ö–æ–Ω–≤–µ—Ä—Ç–µ—Ä Unity messages –≤ MCP —Ñ–æ—Ä–º–∞—Ç
 */
function convertToMCPResponse(unityResponse) {
  // –ù–æ–≤–∞—è Unity –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç { messages: [...] }
  if (unityResponse.messages && Array.isArray(unityResponse.messages)) {
    const content = [];
    
    for (const msg of unityResponse.messages) {
      if (msg.type === 'text') {
        content.push({
          type: 'text',
          text: msg.content
        });
      } else if (msg.type === 'image') {
        // –î–æ–±–∞–≤–ª—è–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –µ—Å–ª–∏ –µ—Å—Ç—å
        if (msg.text) {
          content.push({
            type: 'text', 
            text: msg.text
              });
            }
        // –ó–∞—Ç–µ–º —Å–∞–º–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        content.push({
          type: 'image',
          data: msg.content,
          mimeType: 'image/png'
        });
      }
    }
    
    return { content };
  }
  
  // Fallback –¥–ª—è —Å—Ç–∞—Ä–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∞ Unity API
  return convertLegacyResponse(unityResponse);
    }

/**
 * Fallback –¥–ª—è —Å—Ç–∞—Ä–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∞ Unity (–≤—Ä–µ–º–µ–Ω–Ω–æ)
 */
function convertLegacyResponse(unityData) {
  const content = [];
        
  // –û—Å–Ω–æ–≤–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
  if (unityData.message) {
    content.push({
      type: 'text',
      text: unityData.message
    });
  }
  
  // –î–∞–Ω–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
  if (unityData.data && unityData.data !== unityData.message) {
    content.push({
      type: 'text', 
      text: unityData.data
    });
  }
  
  // –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è —Å–∫—Ä–∏–Ω—à–æ—Ç–æ–≤
  if (unityData.image) {
    content.push({
      type: 'text',
      text: 'Unity Screenshot'
    });
    content.push({
      type: 'image',
      data: unityData.image,
      mimeType: 'image/png'
    });
  }
  
  // –û—à–∏–±–∫–∏ Unity
  if (unityData.errors && unityData.errors.length > 0) {
    const errorText = unityData.errors.map(err => {
      if (typeof err === 'object') {
        const level = err.Level || err.level || 'Info';
        const message = err.Message || err.message || 'Unknown error';
        return `${level}: ${message}`;
      }
      return err.toString();
    }).join('\n');
    
    content.push({
      type: 'text',
      text: `Unity Logs:\n${errorText}`
    });
  }
  
  // –ï—Å–ª–∏ –Ω–µ—Ç –∫–æ–Ω—Ç–µ–Ω—Ç–∞, –¥–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
  if (content.length === 0) {
    content.push({
      type: 'text',
      text: `Unity Status: ${unityData.status || 'Unknown'}`
    });
  }
  
  return { content };
  }
  
/**
 * –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ Unity –∑–∞–ø—Ä–æ—Å–æ–≤
 */
async function handleUnityRequest(endpoint, data = {}, timeout = 10000) {
  try {
    // üöÄ –£–±–µ–∂–¥–∞–µ–º—Å—è —á—Ç–æ –¥–∞–Ω–Ω—ã–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ —Å–µ—Ä–∏–∞–ª–∏–∑—É—é—Ç—Å—è –≤ UTF-8
    const jsonData = JSON.stringify(data);
    
    const response = await axios.post(`${UNITY_BASE_URL}${endpoint}`, jsonData, {
      timeout,
      responseType: 'json',
      headers: { 
        'Content-Type': 'application/json; charset=utf-8',
        'Accept': 'application/json; charset=utf-8'
      }
    });
    
    return convertToMCPResponse(response.data);
  } catch (error) {
    const errorContent = [{
      type: 'text',
      text: `Unity Connection Error: ${error.message}\n\n–ü—Ä–æ–≤–µ—Ä—å—Ç–µ:\n‚Ä¢ Unity –∑–∞–ø—É—â–µ–Ω\n‚Ä¢ Unity Bridge Window –æ—Ç–∫—Ä—ã—Ç\n‚Ä¢ HTTP —Å–µ—Ä–≤–µ—Ä —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–∞ –ø–æ—Ä—Ç—É 7777`
    }];
    
    // –î–æ–±–∞–≤–ª—è–µ–º –¥–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏ –µ—Å–ª–∏ –µ—Å—Ç—å
    if (error.response?.data) {
      try {
        const unityError = convertToMCPResponse(error.response.data);
        errorContent.push(...unityError.content);
      } catch {
        errorContent.push({
          type: 'text',
          text: `Unity Error Details: ${JSON.stringify(error.response.data)}`
        });
      }
    }
    
    return { content: errorContent };
        }
}

// Unity –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã
const unityTools = [
  {
    name: "screenshot",
    description: 'Unity Game View —Å–∫—Ä–∏–Ω—à–æ—Ç',
    inputSchema: {
      type: 'object',
      properties: {
        systemScreenshot: {
          type: 'boolean',
          default: false,
          description: 'üñ•Ô∏è –í–∫–ª—é—á–∏—Ç—å —Å–∫—Ä–∏–Ω—à–æ—Ç —Ä–∞–±–æ—á–µ–≥–æ —Å—Ç–æ–ª–∞. –ò–°–ü–û–õ–¨–ó–û–í–ê–¢–¨ –¢–û–õ–¨–ö–û –ü–†–ò –°–¢–†–û–ì–û–ô –ù–ï–û–ë–•–û–î–ò–ú–û–°–¢–ò –£–í–ò–î–ï–¢–¨ –≠–ö–†–ê–ù –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø –ò –ù–ï –ò–°–ü–û–õ–¨–ó–û–í–ê–¢–¨ –ü–†–û–°–¢–û –¢–ê–ö!'
        }
      },
      required: []
    },
    handler: async (params) => {
      return await handleUnityRequest('/api/screenshot');
    }
  },
  
  {
    name: "camera_screenshot", 
    description: 'Unity —Å–∫—Ä–∏–Ω—à–æ—Ç —Å –ø—Ä–æ–∏–∑–≤–æ–ª—å–Ω–æ–π –ø–æ–∑–∏—Ü–∏–∏ –∫–∞–º–µ—Ä—ã',
    inputSchema: {
      type: 'object',
      properties: {
        position: {
          type: 'array',
          items: { type: 'number' },
          minItems: 3,
          maxItems: 3,
          description: '–ü–æ–∑–∏—Ü–∏—è –∫–∞–º–µ—Ä—ã [x, y, z]'
        },
        target: {
          type: 'array', 
          items: { type: 'number' },
          minItems: 3,
          maxItems: 3,
          description: '–¢–æ—á–∫–∞ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–∞–º–µ—Ä—ã [x, y, z]'
        },
        width: {
          type: 'number',
          default: 1920,
          minimum: 256,
          maximum: 4096,
          description: '–®–∏—Ä–∏–Ω–∞ —Å–∫—Ä–∏–Ω—à–æ—Ç–∞ –≤ –ø–∏–∫—Å–µ–ª—è—Ö'
        },
        height: {
          type: 'number',
          default: 1080,
          minimum: 256,
          maximum: 4096,
          description: '–í—ã—Å–æ—Ç–∞ —Å–∫—Ä–∏–Ω—à–æ—Ç–∞ –≤ –ø–∏–∫—Å–µ–ª—è—Ö'
        },
        fov: {
          type: 'number',
          default: 60,
          minimum: 10,
          maximum: 179,
          description: '–ü–æ–ª–µ –∑—Ä–µ–Ω–∏—è –∫–∞–º–µ—Ä—ã –≤ –≥—Ä–∞–¥—É—Å–∞—Ö'
        },
        systemScreenshot: {
          type: 'boolean',
          default: false,
          description: 'üñ•Ô∏è –í–∫–ª—é—á–∏—Ç—å —Å–∫—Ä–∏–Ω—à–æ—Ç —Ä–∞–±–æ—á–µ–≥–æ —Å—Ç–æ–ª–∞. –ò–°–ü–û–õ–¨–ó–û–í–ê–¢–¨ –¢–û–õ–¨–ö–û –ü–†–ò –°–¢–†–û–ì–û–ô –ù–ï–û–ë–•–û–î–ò–ú–û–°–¢–ò –£–í–ò–î–ï–¢–¨ –≠–ö–†–ê–ù –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø –ò –ù–ï –ò–°–ü–û–õ–¨–ó–û–í–ê–¢–¨ –ü–†–û–°–¢–û –¢–ê–ö!'
        }
      },
      required: ['position', 'target']
    },
    handler: async (params) => {
      const requestBody = {
        position: params.position,
        target: params.target,
        fov: params.fov || 60,
        width: params.width || 1920,
        height: params.height || 1080
      };
      
      return await handleUnityRequest('/api/camera_screenshot', requestBody, 20000);
    }
  },

  {
    name: "scene_hierarchy",
    description: 'Unity —Å—Ü–µ–Ω–∞: –∞–Ω–∞–ª–∏–∑ –æ–±—ä–µ–∫—Ç–æ–≤ –∏ –∏–µ—Ä–∞—Ä—Ö–∏–∏',
    inputSchema: {
      type: 'object',
      properties: {
        detailed: {
          type: 'boolean',
          default: false,
          description: '–î–µ—Ç–∞–ª—å–Ω—ã–π —Ä–µ–∂–∏–º: false - —Ç–æ–ª—å–∫–æ –∏–º–µ–Ω–∞ –∏ —Å—Ç—Ä—É–∫—Ç—É—Ä–∞, true - + –ø–æ–∑–∏—Ü–∏—è, –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã, —Å–≤–æ–π—Å—Ç–≤–∞'
        },
        systemScreenshot: {
          type: 'boolean',
          default: false,
          description: 'üñ•Ô∏è –í–∫–ª—é—á–∏—Ç—å —Å–∫—Ä–∏–Ω—à–æ—Ç —Ä–∞–±–æ—á–µ–≥–æ —Å—Ç–æ–ª–∞. –ò–°–ü–û–õ–¨–ó–û–í–ê–¢–¨ –¢–û–õ–¨–ö–û –ü–†–ò –°–¢–†–û–ì–û–ô –ù–ï–û–ë–•–û–î–ò–ú–û–°–¢–ò –£–í–ò–î–ï–¢–¨ –≠–ö–†–ê–ù –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø –ò –ù–ï –ò–°–ü–û–õ–¨–ó–û–í–ê–¢–¨ –ü–†–û–°–¢–û –¢–ê–ö!'
        }
      },
      required: []
    },
    handler: async (params) => {
      const requestBody = {
        detailed: params.detailed || false
      };
      
      return await handleUnityRequest('/api/scene_hierarchy', requestBody, 15000);
    }
  },

  {
    name: "execute",
    description: 'Unity C# Code Executor - –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ C# –∫–æ–¥–∞ –≤ Unity Editor.\n\n‚úÖ –ü–û–î–î–ï–†–ñ–ò–í–ê–ï–¢–°–Ø:\n‚Ä¢ –ü—Ä–æ—Å—Ç—ã–µ –∫–ª–∞—Å—Å—ã —Å –º–µ—Ç–æ–¥–∞–º–∏ –∏ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä–∞–º–∏\n‚Ä¢ –õ–æ–∫–∞–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ (–∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ static)\n‚Ä¢ –ü–æ–ª–Ω—ã–π Unity API (GameObject, Transform, Material, Rigidbody, etc.)\n‚Ä¢ LINQ –æ–ø–µ—Ä–∞—Ü–∏–∏ (Where, Select, GroupBy, Sum, etc.)\n‚Ä¢ –¶–∏–∫–ª—ã, –∫–æ–ª–ª–µ–∫—Ü–∏–∏, –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –≤—ã—á–∏—Å–ª–µ–Ω–∏—è\n‚Ä¢ Using statements, –º–Ω–æ–≥–æ—Å—Ç—Ä–æ—á–Ω—ã–π –∫–æ–¥\n\n‚ùå –ù–ï –ü–û–î–î–ï–†–ñ–ò–í–ê–ï–¢–°–Ø:\n‚Ä¢ –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å—ã, –∞–±—Å—Ç—Ä–∞–∫—Ç–Ω—ã–µ –∫–ª–∞—Å—Å—ã, –Ω–∞—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ\n‚Ä¢ –í–Ω–µ—à–Ω–∏–µ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏ (JSON.NET, System.IO)\n‚Ä¢ –ê—Ç—Ä–∏–±—É—Ç—ã [Serializable], [System.Flags]\n‚Ä¢ –°–ª–æ–∂–Ω–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–∞—Å—Å–∏–≤–æ–≤ –≤ –∫–ª–∞—Å—Å–∞—Ö\n\nüéØ –ü–†–ò–ú–ï–†–´:\n‚Ä¢ –°–æ–∑–¥–∞–Ω–∏–µ –æ–±—ä–µ–∫—Ç–æ–≤: GameObject.CreatePrimitive(PrimitiveType.Cube)\n‚Ä¢ –ö–ª–∞—Å—Å—ã: public class Builder { public GameObject Create() {...} }\n‚Ä¢ –§—É–Ω–∫—Ü–∏–∏: GameObject CreateCube(Vector3 pos) {...}\n‚Ä¢ LINQ: objects.Where(o => o.name.Contains("Test")).ToList()',
    inputSchema: {
      type: 'object',
      properties: {
        code: {
          type: 'string',
          description: 'C# –∫–æ–¥ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –≤ Unity Editor'
        },
        systemScreenshot: {
          type: 'boolean',
          default: false,
          description: 'üñ•Ô∏è –í–∫–ª—é—á–∏—Ç—å —Å–∫—Ä–∏–Ω—à–æ—Ç —Ä–∞–±–æ—á–µ–≥–æ —Å—Ç–æ–ª–∞. –ò–°–ü–û–õ–¨–ó–û–í–ê–¢–¨ –¢–û–õ–¨–ö–û –ü–†–ò –°–¢–†–û–ì–û–ô –ù–ï–û–ë–•–û–î–ò–ú–û–°–¢–ò –£–í–ò–î–ï–¢–¨ –≠–ö–†–ê–ù –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø –ò –ù–ï –ò–°–ü–û–õ–¨–ó–û–í–ê–¢–¨ –¢–û–õ–¨–ö–û –ü–†–û–°–¢–û –¢–ê–ö!'
        }
      },
      required: ['code']
    },
    handler: async (params) => {
        const requestBody = {
        code: params.code
      };
      
      return await handleUnityRequest('/api/execute', requestBody, 30000);
    }
  },

  {
    name: "add_component",
    description: 'Unity Component Manager - –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–∫—Ä–∏–ø—Ç–æ–≤ –Ω–∞ –æ–±—ä–µ–∫—Ç—ã –≤ —Å—Ü–µ–Ω–µ.\n\n‚úÖ –ü–û–î–î–ï–†–ñ–ò–í–ê–ï–¢–°–Ø:\n‚Ä¢ –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ª—é–±—ã—Ö MonoBehaviour —Å–∫—Ä–∏–ø—Ç–æ–≤ –Ω–∞ GameObject\n‚Ä¢ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –ø–æ–∏—Å–∫ —Å–∫—Ä–∏–ø—Ç–æ–≤ –ø–æ –∏–º–µ–Ω–∏\n‚Ä¢ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤\n‚Ä¢ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ü–µ–Ω—ã\n\nüéØ –ü–†–ò–ú–ï–†–´:\n‚Ä¢ –î–æ–±–∞–≤–∏—Ç—å —Å–∫—Ä–∏–ø—Ç "PlayerController" –Ω–∞ –æ–±—ä–µ–∫—Ç "Player"\n‚Ä¢ –î–æ–±–∞–≤–∏—Ç—å —Å–∫—Ä–∏–ø—Ç "EnemyAI" –Ω–∞ –æ–±—ä–µ–∫—Ç "Enemy"\n‚Ä¢ –î–æ–±–∞–≤–∏—Ç—å —Å–∫—Ä–∏–ø—Ç "Collectible" –Ω–∞ –æ–±—ä–µ–∫—Ç "Coin"',
    inputSchema: {
      type: 'object',
      properties: {
        object_name: {
          type: 'string',
          description: '–ò–º—è GameObject –≤ —Å—Ü–µ–Ω–µ, –Ω–∞ –∫–æ—Ç–æ—Ä—ã–π –Ω—É–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –∫–æ–º–ø–æ–Ω–µ–Ω—Ç'
        },
        script_name: {
          type: 'string',
          description: '–ò–º—è —Å–∫—Ä–∏–ø—Ç–∞ (MonoBehaviour), –∫–æ—Ç–æ—Ä—ã–π –Ω—É–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å'
        },
        systemScreenshot: {
          type: 'boolean',
          default: false,
          description: 'üñ•Ô∏è –í–∫–ª—é—á–∏—Ç—å —Å–∫—Ä–∏–Ω—à–æ—Ç —Ä–∞–±–æ—á–µ–≥–æ —Å—Ç–æ–ª–∞. –ò–°–ü–û–õ–¨–ó–û–í–ê–¢–¨ –¢–û–õ–¨–ö–û –ü–†–ò –°–¢–†–û–ì–û–ô –ù–ï–û–ë–•–û–î–ò–ú–û–°–¢–ò –£–í–ò–î–ï–¢–¨ –≠–ö–†–ê–ù –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø –ò –ù–ï –ò–°–ü–û–õ–¨–ó–û–í–ê–¢–¨ –ü–†–û–°–¢–û –¢–ê–ö!'
        }
      },
      required: ['object_name', 'script_name']
    },
    handler: async (params) => {
      const requestBody = {
        object_name: params.object_name,
        script_name: params.script_name
      };
      
      return await handleUnityRequest('/api/add_component', requestBody, 15000);
    }
  },

  {
    name: "create_and_add_script",
    description: 'Unity Script Creator & Component Manager - —Å–æ–∑–¥–∞–Ω–∏–µ —Å–∫—Ä–∏–ø—Ç–∞ –∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –µ–≥–æ –Ω–∞ –æ–±—ä–µ–∫—Ç.\n\n‚úÖ –ü–û–î–î–ï–†–ñ–ò–í–ê–ï–¢–°–Ø:\n‚Ä¢ –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ C# —Å–∫—Ä–∏–ø—Ç–∞ —Å –∑–∞–¥–∞–Ω–Ω—ã–º —Å–æ–¥–µ—Ä–∂–∏–º—ã–º\n‚Ä¢ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–∫—Ä–∏–ø—Ç–∞ –Ω–∞ —É–∫–∞–∑–∞–Ω–Ω—ã–π GameObject\n‚Ä¢ –ö–æ–º–ø–∏–ª—è—Ü–∏—è –∏ –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏–Ω—Ç–∞–∫—Å–∏—Å–∞\n‚Ä¢ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞ Unity\n\nüéØ –ü–†–ò–ú–ï–†–´:\n‚Ä¢ –°–æ–∑–¥–∞—Ç—å —Å–∫—Ä–∏–ø—Ç "PlayerMovement" –∏ –¥–æ–±–∞–≤–∏—Ç—å –Ω–∞ –æ–±—ä–µ–∫—Ç "Player"\n‚Ä¢ –°–æ–∑–¥–∞—Ç—å —Å–∫—Ä–∏–ø—Ç "EnemyBehavior" –∏ –¥–æ–±–∞–≤–∏—Ç—å –Ω–∞ –æ–±—ä–µ–∫—Ç "Enemy"\n‚Ä¢ –°–æ–∑–¥–∞—Ç—å —Å–∫—Ä–∏–ø—Ç "CollectibleItem" –∏ –¥–æ–±–∞–≤–∏—Ç—å –Ω–∞ –æ–±—ä–µ–∫—Ç "Coin"',
    inputSchema: {
      type: 'object',
      properties: {
        script_name: {
          type: 'string',
          description: '–ò–º—è –Ω–æ–≤–æ–≥–æ —Å–∫—Ä–∏–ø—Ç–∞ (–±–µ–∑ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è .cs)'
        },
        script_content: {
          type: 'string',
          description: '–°–æ–¥–µ—Ä–∂–∏–º–æ–µ C# —Å–∫—Ä–∏–ø—Ç–∞ (–∫–æ–¥ –∫–ª–∞—Å—Å–∞)'
        },
        object_name: {
          type: 'string',
          description: '–ò–º—è GameObject –≤ —Å—Ü–µ–Ω–µ, –Ω–∞ –∫–æ—Ç–æ—Ä—ã–π –Ω—É–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å —Å–∫—Ä–∏–ø—Ç'
        },
        systemScreenshot: {
          type: 'boolean',
          default: false,
          description: 'üñ•Ô∏è –í–∫–ª—é—á–∏—Ç—å —Å–∫—Ä–∏–Ω—à–æ—Ç —Ä–∞–±–æ—á–µ–≥–æ —Å—Ç–æ–ª–∞. –ò–°–ü–û–õ–¨–ó–û–í–ê–¢–¨ –¢–û–õ–¨–ö–û –ü–†–ò –°–¢–†–û–ì–û–ô –ù–ï–û–ë–•–û–î–ò–ú–û–°–¢–ò –£–í–ò–î–ï–¢–¨ –≠–ö–†–ê–ù –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø –ò –ù–ï –ò–°–ü–û–õ–¨–ó–û–í–ê–¢–¨ –ü–†–û–°–¢–û –¢–ê–ö!'
        }
      },
      required: ['script_name', 'script_content', 'object_name']
    },
    handler: async (params) => {
      const requestBody = {
        script_name: params.script_name,
        script_content: params.script_content,
        object_name: params.object_name
      };
      
      return await handleUnityRequest('/api/create_and_add_script', requestBody, 20000);
    }
  },

  {
    name: "create_prefab",
    description: 'Unity Prefab Creator - —Å–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–µ—Ñ–∞–±–∞ –∏–∑ –æ–±—ä–µ–∫—Ç–∞ –Ω–∞ —Å—Ü–µ–Ω–µ.\n\n‚úÖ –ü–û–î–î–ï–†–ñ–ò–í–ê–ï–¢–°–Ø:\n‚Ä¢ –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–µ—Ñ–∞–±–∞ –∏–∑ –ª—é–±–æ–≥–æ GameObject\n‚Ä¢ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ –ø–∞–ø–æ–∫\n‚Ä¢ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ AssetDatabase\n‚Ä¢ –í–∞–ª–∏–¥–∞—Ü–∏—è –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö\n\nüéØ –ü–†–ò–ú–ï–†–´:\n‚Ä¢ –°–æ–∑–¥–∞—Ç—å –ø—Ä–µ—Ñ–∞–± –∏–∑ –æ–±—ä–µ–∫—Ç–∞ "Player" –≤ "Assets/Prefabs/Player.prefab"\n‚Ä¢ –°–æ–∑–¥–∞—Ç—å –ø—Ä–µ—Ñ–∞–± –∏–∑ –æ–±—ä–µ–∫—Ç–∞ "Enemy" –≤ "Assets/Enemies/Enemy.prefab"',
    inputSchema: {
      type: 'object',
      properties: {
        object_name: {
          type: 'string',
          description: '–ò–º—è GameObject –Ω–∞ —Å—Ü–µ–Ω–µ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–µ—Ñ–∞–±–∞'
        },
        prefab_path: {
          type: 'string',
          description: '–ü—É—Ç—å –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø—Ä–µ—Ñ–∞–±–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä: Assets/Prefabs/MyPrefab.prefab)'
        },
        systemScreenshot: {
          type: 'boolean',
          default: false,
          description: 'üñ•Ô∏è –í–∫–ª—é—á–∏—Ç—å —Å–∫—Ä–∏–Ω—à–æ—Ç —Ä–∞–±–æ—á–µ–≥–æ —Å—Ç–æ–ª–∞. –ò–°–ü–û–õ–¨–ó–û–í–ê–¢–¨ –¢–û–õ–¨–ö–û –ü–†–ò –°–¢–†–û–ì–û–ô –ù–ï–û–ë–•–û–î–ò–ú–û–°–¢–ò –£–í–ò–î–ï–¢–¨ –≠–ö–†–ê–ù –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø –ò –ù–ï –ò–°–ü–û–õ–¨–ó–û–í–ê–¢–¨ –ü–†–û–°–¢–û –¢–ê–ö!'
        }
      },
      required: ['object_name', 'prefab_path']
    },
    handler: async (params) => {
      const requestBody = {
        object_name: params.object_name,
        prefab_path: params.prefab_path
      };
      
      return await handleUnityRequest('/api/create_prefab', requestBody, 15000);
    }
  },

  {
    name: "instantiate_prefab",
    description: 'Unity Prefab Instance Manager - —Å–æ–∑–¥–∞–Ω–∏–µ —ç–∫–∑–µ–º–ø–ª—è—Ä–æ–≤ –ø—Ä–µ—Ñ–∞–±–æ–≤ –Ω–∞ —Å—Ü–µ–Ω–µ.\n\n‚úÖ –ü–û–î–î–ï–†–ñ–ò–í–ê–ï–¢–°–Ø:\n‚Ä¢ –ó–∞–≥—Ä—É–∑–∫–∞ –ø—Ä–µ—Ñ–∞–±–æ–≤ –ø–æ –ø—É—Ç–∏\n‚Ä¢ –°–æ–∑–¥–∞–Ω–∏–µ —ç–∫–∑–µ–º–ø–ª—è—Ä–æ–≤ —Å –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º–æ–π –ø–æ–∑–∏—Ü–∏–µ–π\n‚Ä¢ –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–æ–∑–∏—Ü–∏–∏, –ø–æ–≤–æ—Ä–æ—Ç–∞ –∏ –º–∞—Å—à—Ç–∞–±–∞\n‚Ä¢ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ü–µ–Ω—ã\n\nüéØ –ü–†–ò–ú–ï–†–´:\n‚Ä¢ –°–æ–∑–¥–∞—Ç—å —ç–∫–∑–µ–º–ø–ª—è—Ä "Assets/Prefabs/Player.prefab" –≤ –ø–æ–∑–∏—Ü–∏–∏ (0, 1, 0)\n‚Ä¢ –°–æ–∑–¥–∞—Ç—å —ç–∫–∑–µ–º–ø–ª—è—Ä "Assets/Enemies/Enemy.prefab" —Å –ø–æ–≤–æ—Ä–æ—Ç–æ–º (0, 90, 0)',
    inputSchema: {
      type: 'object',
      properties: {
        prefab_path: {
          type: 'string',
          description: '–ü—É—Ç—å –∫ –ø—Ä–µ—Ñ–∞–±—É (–Ω–∞–ø—Ä–∏–º–µ—Ä: Assets/Prefabs/MyPrefab.prefab)'
        },
        position: {
          type: 'array',
          items: { type: 'number' },
          minItems: 3,
          maxItems: 3,
          description: '–ü–æ–∑–∏—Ü–∏—è —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ [x, y, z]',
          default: [0, 0, 0]
        },
        rotation: {
          type: 'array',
          items: { type: 'number' },
          minItems: 3,
          maxItems: 3,
          description: '–ü–æ–≤–æ—Ä–æ—Ç —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ –≤ –≥—Ä–∞–¥—É—Å–∞—Ö [x, y, z]',
          default: [0, 0, 0]
        },
        scale: {
          type: 'array',
          items: { type: 'number' },
          minItems: 3,
          maxItems: 3,
          description: '–ú–∞—Å—à—Ç–∞–± —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ [x, y, z]',
          default: [1, 1, 1]
        },
        systemScreenshot: {
          type: 'boolean',
          default: false,
          description: 'üñ•Ô∏è –í–∫–ª—é—á–∏—Ç—å —Å–∫—Ä–∏–Ω—à–æ—Ç —Ä–∞–±–æ—á–µ–≥–æ —Å—Ç–æ–ª–∞. –ò–°–ü–û–õ–¨–ó–û–í–ê–¢–¨ –¢–û–õ–¨–ö–û –ü–†–ò –°–¢–†–û–ì–û–ô –ù–ï–û–ë–•–û–î–ò–ú–û–°–¢–ò –£–í–ò–î–ï–¢–¨ –≠–ö–†–ê–ù –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø –ò –ù–ï –ò–°–ü–û–õ–¨–ó–û–í–ê–¢–¨ –ü–†–û–°–¢–û –¢–ê–ö!'
        }
      },
      required: ['prefab_path']
    },
    handler: async (params) => {
      const requestBody = {
        prefab_path: params.prefab_path,
        position: params.position || [0, 0, 0],
        rotation: params.rotation || [0, 0, 0],
        scale: params.scale || [1, 1, 1]
      };
      
      return await handleUnityRequest('/api/instantiate_prefab', requestBody, 15000);
    }
  },

  {
    name: "list_prefabs",
    description: 'Unity Prefab Explorer - –ø–æ–∏—Å–∫ –∏ —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –ø—Ä–µ—Ñ–∞–±–æ–≤ –≤ –ø—Ä–æ–µ–∫—Ç–µ.\n\n‚úÖ –ü–û–î–î–ï–†–ñ–ò–í–ê–ï–¢–°–Ø:\n‚Ä¢ –ü–æ–∏—Å–∫ –ø—Ä–µ—Ñ–∞–±–æ–≤ –≤ —É–∫–∞–∑–∞–Ω–Ω–æ–π –ø–∞–ø–∫–µ\n‚Ä¢ –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö .prefab —Ñ–∞–π–ª–æ–≤\n‚Ä¢ –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ –ø—É—Ç–∏ –ø–æ–∏—Å–∫–∞\n‚Ä¢ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–µ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –ø—Ä–µ—Ñ–∞–±–æ–≤\n\nüéØ –ü–†–ò–ú–ï–†–´:\n‚Ä¢ –ù–∞–π—Ç–∏ –≤—Å–µ –ø—Ä–µ—Ñ–∞–±—ã –≤ "Assets/Prefabs"\n‚Ä¢ –ù–∞–π—Ç–∏ –≤—Å–µ –ø—Ä–µ—Ñ–∞–±—ã –≤ "Assets"\n‚Ä¢ –ù–∞–π—Ç–∏ –≤—Å–µ –ø—Ä–µ—Ñ–∞–±—ã –≤ "Assets/Enemies"',
    inputSchema: {
      type: 'object',
      properties: {
        search_path: {
          type: 'string',
          description: '–ü—É—Ç—å –¥–ª—è –ø–æ–∏—Å–∫–∞ –ø—Ä–µ—Ñ–∞–±–æ–≤ (–Ω–∞–ø—Ä–∏–º–µ—Ä: Assets/Prefabs)',
          default: 'Assets'
        },
        systemScreenshot: {
          type: 'boolean',
          default: false,
          description: 'üñ•Ô∏è –í–∫–ª—é—á–∏—Ç—å —Å–∫—Ä–∏–Ω—à–æ—Ç —Ä–∞–±–æ—á–µ–≥–æ —Å—Ç–æ–ª–∞. –ò–°–ü–û–õ–¨–ó–û–í–ê–¢–¨ –¢–û–õ–¨–ö–û –ü–†–ò –°–¢–†–û–ì–û–ô –ù–ï–û–ë–•–û–î–ò–ú–û–°–¢–ò –£–í–ò–î–ï–¢–¨ –≠–ö–†–ê–ù –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø –ò –ù–ï –ò–°–ü–û–õ–¨–ó–û–í–ê–¢–¨ –ü–†–û–°–¢–û –¢–ê–ö!'
        }
      },
      required: []
    },
    handler: async (params) => {
      const requestBody = {
        search_path: params.search_path || 'Assets'
      };
      
      return await handleUnityRequest('/api/list_prefabs', requestBody, 10000);
    }
  },

  // ===== CANVAS MANAGEMENT =====
  
  {
    name: "create_canvas",
    description: 'Unity Canvas Creator - —Å–æ–∑–¥–∞–Ω–∏–µ Canvas –¥–ª—è UI —ç–ª–µ–º–µ–Ω—Ç–æ–≤.\n\n‚úÖ –ü–û–î–î–ï–†–ñ–ò–í–ê–ï–¢–°–Ø:\n‚Ä¢ –°–æ–∑–¥–∞–Ω–∏–µ Canvas —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏\n‚Ä¢ –†–∞–∑–ª–∏—á–Ω—ã–µ —Ä–µ–∂–∏–º—ã —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥–∞\n‚Ä¢ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ CanvasScaler\n‚Ä¢ –î–æ–±–∞–≤–ª–µ–Ω–∏–µ GraphicRaycaster\n\nüéØ –ü–†–ò–ú–ï–†–´:\n‚Ä¢ –°–æ–∑–¥–∞—Ç—å Canvas "MainUI" –≤ —Ä–µ–∂–∏–º–µ ScreenSpaceOverlay\n‚Ä¢ –°–æ–∑–¥–∞—Ç—å Canvas "WorldUI" –≤ —Ä–µ–∂–∏–º–µ WorldSpace',
    inputSchema: {
      type: 'object',
      properties: {
        canvas_name: {
          type: 'string',
          description: '–ò–º—è Canvas',
          default: 'New Canvas'
        },
        render_mode: {
          type: 'string',
          enum: ['ScreenSpaceOverlay', 'ScreenSpaceCamera', 'WorldSpace'],
          description: '–†–µ–∂–∏–º —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥–∞ Canvas',
          default: 'ScreenSpaceOverlay'
        },
        sorting_order: {
          type: 'number',
          description: '–ü–æ—Ä—è–¥–æ–∫ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏ Canvas',
          default: 0
        },
        systemScreenshot: {
          type: 'boolean',
          default: false,
          description: 'üñ•Ô∏è –í–∫–ª—é—á–∏—Ç—å —Å–∫—Ä–∏–Ω—à–æ—Ç —Ä–∞–±–æ—á–µ–≥–æ —Å—Ç–æ–ª–∞. –ò–°–ü–û–õ–¨–ó–û–í–ê–¢–¨ –¢–û–õ–¨–ö–û –ü–†–ò –°–¢–†–û–ì–û–ô –ù–ï–û–ë–•–û–î–ò–ú–û–°–¢–ò –£–í–ò–î–ï–¢–¨ –≠–ö–†–ê–ù –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø –ò –ù–ï –ò–°–ü–û–õ–¨–ó–û–í–ê–¢–¨ –ü–†–û–°–¢–û –¢–ê–ö!'
        }
      },
      required: []
    },
    handler: async (params) => {
      const requestBody = {
        canvas_name: params.canvas_name || 'New Canvas',
        render_mode: params.render_mode || 'ScreenSpaceOverlay',
        sorting_order: params.sorting_order || 0
      };
      
      return await handleUnityRequest('/api/create_canvas', requestBody, 15000);
    }
  },

  // ===== UI ELEMENTS =====
  
  {
    name: "create_ui_element",
    description: 'Unity UI Element Creator - —Å–æ–∑–¥–∞–Ω–∏–µ UI —ç–ª–µ–º–µ–Ω—Ç–æ–≤.\n\n‚úÖ –ü–û–î–î–ï–†–ñ–ò–í–ê–ï–¢–°–Ø:\n‚Ä¢ Button, Text, Image, InputField\n‚Ä¢ Panel, Slider, Toggle, Dropdown\n‚Ä¢ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–æ–∑–∏—Ü–∏–∏ –∏ —Ä–∞–∑–º–µ—Ä–∞\n‚Ä¢ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ –¥–æ—á–µ—Ä–Ω–∏—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤\n\nüéØ –ü–†–ò–ú–ï–†–´:\n‚Ä¢ –°–æ–∑–¥–∞—Ç—å –∫–Ω–æ–ø–∫—É "StartButton" –Ω–∞ Canvas\n‚Ä¢ –°–æ–∑–¥–∞—Ç—å —Ç–µ–∫—Å—Ç–æ–≤–æ–µ –ø–æ–ª–µ "ScoreText" –Ω–∞ Panel',
    inputSchema: {
      type: 'object',
      properties: {
        element_type: {
          type: 'string',
          enum: ['button', 'text', 'textmeshpro', 'image', 'inputfield', 'input', 'panel', 'slider', 'toggle', 'dropdown'],
          description: '–¢–∏–ø UI —ç–ª–µ–º–µ–Ω—Ç–∞'
        },
        element_name: {
          type: 'string',
          description: '–ò–º—è UI —ç–ª–µ–º–µ–Ω—Ç–∞'
        },
        parent_name: {
          type: 'string',
          description: '–ò–º—è —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–≥–æ –æ–±—ä–µ–∫—Ç–∞ (Canvas –∏–ª–∏ –¥—Ä—É–≥–æ–π UI —ç–ª–µ–º–µ–Ω—Ç)'
        },
        position: {
          type: 'array',
          items: { type: 'number' },
          minItems: 2,
          maxItems: 2,
          description: '–ü–æ–∑–∏—Ü–∏—è —ç–ª–µ–º–µ–Ω—Ç–∞ [x, y]',
          default: [0, 0]
        },
        size: {
          type: 'array',
          items: { type: 'number' },
          minItems: 2,
          maxItems: 2,
          description: '–†–∞–∑–º–µ—Ä —ç–ª–µ–º–µ–Ω—Ç–∞ [width, height]',
          default: [100, 100]
        },
        systemScreenshot: {
          type: 'boolean',
          default: false,
          description: 'üñ•Ô∏è –í–∫–ª—é—á–∏—Ç—å —Å–∫—Ä–∏–Ω—à–æ—Ç —Ä–∞–±–æ—á–µ–≥–æ —Å—Ç–æ–ª–∞. –ò–°–ü–û–õ–¨–ó–û–í–ê–¢–¨ –¢–û–õ–¨–ö–û –ü–†–ò –°–¢–†–û–ì–û–ô –ù–ï–û–ë–•–û–î–ò–ú–û–°–¢–ò –£–í–ò–î–ï–¢–¨ –≠–ö–†–ê–ù –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø –ò –ù–ï –ò–°–ü–û–õ–¨–ó–û–í–ê–¢–¨ –ü–†–û–°–¢–û –¢–ê–ö!'
        }
      },
      required: ['element_type']
    },
    handler: async (params) => {
      const requestBody = {
        element_type: params.element_type,
        element_name: params.element_name || `New ${params.element_type}`,
        parent_name: params.parent_name,
        position: params.position || [0, 0],
        size: params.size || [100, 100]
      };
      
      return await handleUnityRequest('/api/create_ui_element', requestBody, 15000);
    }
  },

  {
    name: "set_ui_properties",
    description: 'Unity UI Properties Setter - –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–≤–æ–π—Å—Ç–≤ UI —ç–ª–µ–º–µ–Ω—Ç–æ–≤.\n\n‚úÖ –ü–û–î–î–ï–†–ñ–ò–í–ê–ï–¢–°–Ø:\n‚Ä¢ –ü–æ–∑–∏—Ü–∏—è, —Ä–∞–∑–º–µ—Ä, —è–∫–æ—Ä—è\n‚Ä¢ Pivot, rotation, scale\n‚Ä¢ –¶–≤–µ—Ç, —Ç–µ–∫—Å—Ç, –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è\n‚Ä¢ –ê–Ω–∏–º–∞—Ü–∏–∏ –∏ –ø–µ—Ä–µ—Ö–æ–¥—ã\n\nüéØ –ü–†–ò–ú–ï–†–´:\n‚Ä¢ –ò–∑–º–µ–Ω–∏—Ç—å –ø–æ–∑–∏—Ü–∏—é –∫–Ω–æ–ø–∫–∏ –Ω–∞ (100, 200)\n‚Ä¢ –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ä–∞–∑–º–µ—Ä –ø–∞–Ω–µ–ª–∏ 300x400',
    inputSchema: {
      type: 'object',
      properties: {
        object_name: {
          type: 'string',
          description: '–ò–º—è UI –æ–±—ä–µ–∫—Ç–∞ –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏'
        },
        properties: {
          type: 'object',
          description: '–°–ª–æ–≤–∞—Ä—å —Å–≤–æ–π—Å—Ç–≤ –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏',
          properties: {
            position: {
              type: 'array',
              items: { type: 'number' },
              minItems: 2,
              maxItems: 2,
              description: '–ü–æ–∑–∏—Ü–∏—è [x, y]'
            },
            size: {
              type: 'array',
              items: { type: 'number' },
              minItems: 2,
              maxItems: 2,
              description: '–†–∞–∑–º–µ—Ä [width, height]'
            },
            anchor_min: {
              type: 'array',
              items: { type: 'number' },
              minItems: 2,
              maxItems: 2,
              description: '–ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —è–∫–æ—Ä—å [x, y]'
            },
            anchor_max: {
              type: 'array',
              items: { type: 'number' },
              minItems: 2,
              maxItems: 2,
              description: '–ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —è–∫–æ—Ä—å [x, y]'
            },
            pivot: {
              type: 'array',
              items: { type: 'number' },
              minItems: 2,
              maxItems: 2,
              description: 'Pivot [x, y]'
            }
          }
        },
        systemScreenshot: {
          type: 'boolean',
          default: false,
          description: 'üñ•Ô∏è –í–∫–ª—é—á–∏—Ç—å —Å–∫—Ä–∏–Ω—à–æ—Ç —Ä–∞–±–æ—á–µ–≥–æ —Å—Ç–æ–ª–∞. –ò–°–ü–û–õ–¨–ó–û–í–ê–¢–¨ –¢–û–õ–¨–ö–û –ü–†–ò –°–¢–†–û–ì–û–ô –ù–ï–û–ë–•–û–î–ò–ú–û–°–¢–ò –£–í–ò–î–ï–¢–¨ –≠–ö–†–ê–ù –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø –ò –ù–ï –ò–°–ü–û–õ–¨–ó–û–í–ê–¢–¨ –ü–†–û–°–¢–û –¢–ê–ö!'
        }
      },
      required: ['object_name', 'properties']
    },
    handler: async (params) => {
      const requestBody = {
        object_name: params.object_name,
        properties: params.properties
      };
      
      return await handleUnityRequest('/api/set_ui_properties', requestBody, 15000);
    }
  },

  {
    name: "list_ui_elements",
    description: 'Unity UI Elements Explorer - –ø–æ–∏—Å–∫ –∏ —Å–ø–∏—Å–æ–∫ UI —ç–ª–µ–º–µ–Ω—Ç–æ–≤.\n\n‚úÖ –ü–û–î–î–ï–†–ñ–ò–í–ê–ï–¢–°–Ø:\n‚Ä¢ –ü–æ–∏—Å–∫ –≤—Å–µ—Ö UI —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –≤ —Å—Ü–µ–Ω–µ\n‚Ä¢ –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ Canvas\n‚Ä¢ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–∏–ø–µ, –ø–æ–∑–∏—Ü–∏–∏, —Ä–∞–∑–º–µ—Ä–µ\n‚Ä¢ –°—Ç–∞—Ç—É—Å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ —ç–ª–µ–º–µ–Ω—Ç–æ–≤\n\nüéØ –ü–†–ò–ú–ï–†–´:\n‚Ä¢ –ù–∞–π—Ç–∏ –≤—Å–µ UI —ç–ª–µ–º–µ–Ω—Ç—ã\n‚Ä¢ –ù–∞–π—Ç–∏ —ç–ª–µ–º–µ–Ω—Ç—ã –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ Canvas',
    inputSchema: {
      type: 'object',
      properties: {
        canvas_name: {
          type: 'string',
          description: '–ò–º—è Canvas –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)'
        },
        systemScreenshot: {
          type: 'boolean',
          default: false,
          description: 'üñ•Ô∏è –í–∫–ª—é—á–∏—Ç—å —Å–∫—Ä–∏–Ω—à–æ—Ç —Ä–∞–±–æ—á–µ–≥–æ —Å—Ç–æ–ª–∞. –ò–°–ü–û–õ–¨–ó–û–í–ê–¢–¨ –¢–û–õ–¨–ö–û –ü–†–ò –°–¢–†–û–ì–û–ô –ù–ï–û–ë–•–û–î–ò–ú–û–°–¢–ò –£–í–ò–î–ï–¢–¨ –≠–ö–†–ê–ù –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø –ò –ù–ï –ò–°–ü–û–õ–¨–ó–û–í–ê–¢–¨ –ü–†–û–°–¢–û –¢–ê–ö!'
        }
      },
      required: []
    },
    handler: async (params) => {
      const requestBody = {
        canvas_name: params.canvas_name
      };
      
      return await handleUnityRequest('/api/list_ui_elements', requestBody, 10000);
    }
  },

  // ===== ADVANCED PREFAB MANAGEMENT =====
  
  {
    name: "create_prefab_from_selection",
    description: 'Unity Prefab Creator from Selection - —Å–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–µ—Ñ–∞–±–∞ –∏–∑ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –æ–±—ä–µ–∫—Ç–æ–≤.\n\n‚úÖ –ü–û–î–î–ï–†–ñ–ò–í–ê–ï–¢–°–Ø:\n‚Ä¢ –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–µ—Ñ–∞–±–∞ –∏–∑ –æ–¥–Ω–æ–≥–æ –æ–±—ä–µ–∫—Ç–∞\n‚Ä¢ –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–µ—Ñ–∞–±–∞ –∏–∑ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –æ–±—ä–µ–∫—Ç–æ–≤\n‚Ä¢ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ –ø–∞–ø–æ–∫\n‚Ä¢ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ AssetDatabase\n\nüéØ –ü–†–ò–ú–ï–†–´:\n‚Ä¢ –°–æ–∑–¥–∞—Ç—å –ø—Ä–µ—Ñ–∞–± –∏–∑ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ Player\n‚Ä¢ –°–æ–∑–¥–∞—Ç—å –ø—Ä–µ—Ñ–∞–± –∏–∑ –≥—Ä—É–ø–ø—ã –æ–±—ä–µ–∫—Ç–æ–≤',
    inputSchema: {
      type: 'object',
      properties: {
        prefab_path: {
          type: 'string',
          description: '–ü—É—Ç—å –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø—Ä–µ—Ñ–∞–±–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä: Assets/Prefabs/MyPrefab.prefab)'
        },
        prefab_name: {
          type: 'string',
          description: '–ò–º—è –ø—Ä–µ—Ñ–∞–±–∞ (–¥–ª—è –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –≤—ã–±–æ—Ä–∞)',
          default: 'New Prefab'
        },
        systemScreenshot: {
          type: 'boolean',
          default: false,
          description: 'üñ•Ô∏è –í–∫–ª—é—á–∏—Ç—å —Å–∫—Ä–∏–Ω—à–æ—Ç —Ä–∞–±–æ—á–µ–≥–æ —Å—Ç–æ–ª–∞. –ò–°–ü–û–õ–¨–ó–û–í–ê–¢–¨ –¢–û–õ–¨–ö–û –ü–†–ò –°–¢–†–û–ì–û–ô –ù–ï–û–ë–•–û–î–ò–ú–û–°–¢–ò –£–í–ò–î–ï–¢–¨ –≠–ö–†–ê–ù –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø –ò –ù–ï –ò–°–ü–û–õ–¨–ó–û–í–ê–¢–¨ –ü–†–û–°–¢–û –¢–ê–ö!'
        }
      },
      required: ['prefab_path']
    },
    handler: async (params) => {
      const requestBody = {
        prefab_path: params.prefab_path,
        prefab_name: params.prefab_name || 'New Prefab'
      };
      
      return await handleUnityRequest('/api/create_prefab_from_selection', requestBody, 15000);
    }
  },

  {
    name: "update_prefab",
    description: 'Unity Prefab Updater - –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –ø—Ä–µ—Ñ–∞–±–∞.\n\n‚úÖ –ü–û–î–î–ï–†–ñ–ò–í–ê–ï–¢–°–Ø:\n‚Ä¢ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–µ—Ñ–∞–±–∞ –∏–∑ –æ–±—ä–µ–∫—Ç–∞ –Ω–∞ —Å—Ü–µ–Ω–µ\n‚Ä¢ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏–π –≤ AssetDatabase\n‚Ä¢ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤—Å–µ—Ö —ç–∫–∑–µ–º–ø–ª—è—Ä–æ–≤\n\nüéØ –ü–†–ò–ú–ï–†–´:\n‚Ä¢ –û–±–Ω–æ–≤–∏—Ç—å –ø—Ä–µ—Ñ–∞–± Player –∏–∑ –æ–±—ä–µ–∫—Ç–∞ Player –Ω–∞ —Å—Ü–µ–Ω–µ\n‚Ä¢ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –ø—Ä–µ—Ñ–∞–±',
    inputSchema: {
      type: 'object',
      properties: {
        prefab_path: {
          type: 'string',
          description: '–ü—É—Ç—å –∫ –ø—Ä–µ—Ñ–∞–±—É –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è'
        },
        object_name: {
          type: 'string',
          description: '–ò–º—è –æ–±—ä–µ–∫—Ç–∞ –Ω–∞ —Å—Ü–µ–Ω–µ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–µ—Ñ–∞–±–∞'
        },
        systemScreenshot: {
          type: 'boolean',
          default: false,
          description: 'üñ•Ô∏è –í–∫–ª—é—á–∏—Ç—å —Å–∫—Ä–∏–Ω—à–æ—Ç —Ä–∞–±–æ—á–µ–≥–æ —Å—Ç–æ–ª–∞. –ò–°–ü–û–õ–¨–ó–û–í–ê–¢–¨ –¢–û–õ–¨–ö–û –ü–†–ò –°–¢–†–û–ì–û–ô –ù–ï–û–ë–•–û–î–ò–ú–û–°–¢–ò –£–í–ò–î–ï–¢–¨ –≠–ö–†–ê–ù –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø –ò –ù–ï –ò–°–ü–û–õ–¨–ó–û–í–ê–¢–¨ –ü–†–û–°–¢–û –¢–ê–ö!'
        }
      },
      required: ['prefab_path', 'object_name']
    },
    handler: async (params) => {
      const requestBody = {
        prefab_path: params.prefab_path,
        object_name: params.object_name
      };
      
      return await handleUnityRequest('/api/update_prefab', requestBody, 15000);
    }
  },

  // ===== ADVANCED SCRIPT MANAGEMENT =====
  
  {
    name: "create_script_template",
    description: 'Unity Script Template Creator - —Å–æ–∑–¥–∞–Ω–∏–µ —Å–∫—Ä–∏–ø—Ç–æ–≤ –ø–æ —à–∞–±–ª–æ–Ω–∞–º.\n\n‚úÖ –ü–û–î–î–ï–†–ñ–ò–í–ê–ï–¢–°–Ø:\n‚Ä¢ MonoBehaviour, Singleton, UI Controller\n‚Ä¢ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–æ–¥–∞\n‚Ä¢ –ü–æ–¥–¥–µ—Ä–∂–∫–∞ namespace\n‚Ä¢ –ì–æ—Ç–æ–≤—ã–µ —à–∞–±–ª–æ–Ω—ã –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤\n\nüéØ –ü–†–ò–ú–ï–†–´:\n‚Ä¢ –°–æ–∑–¥–∞—Ç—å MonoBehaviour —Å–∫—Ä–∏–ø—Ç "PlayerController"\n‚Ä¢ –°–æ–∑–¥–∞—Ç—å Singleton —Å–∫—Ä–∏–ø—Ç "GameManager"',
    inputSchema: {
      type: 'object',
      properties: {
        script_name: {
          type: 'string',
          description: '–ò–º—è —Å–∫—Ä–∏–ø—Ç–∞ (–±–µ–∑ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è .cs)'
        },
        template_type: {
          type: 'string',
          enum: ['monobehaviour', 'singleton', 'ui_controller'],
          description: '–¢–∏–ø —à–∞–±–ª–æ–Ω–∞ —Å–∫—Ä–∏–ø—Ç–∞',
          default: 'monobehaviour'
        },
        namespace_name: {
          type: 'string',
          description: '–ò–º—è namespace (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)'
        },
        systemScreenshot: {
          type: 'boolean',
          default: false,
          description: 'üñ•Ô∏è –í–∫–ª—é—á–∏—Ç—å —Å–∫—Ä–∏–Ω—à–æ—Ç —Ä–∞–±–æ—á–µ–≥–æ —Å—Ç–æ–ª–∞. –ò–°–ü–û–õ–¨–ó–û–í–ê–¢–¨ –¢–û–õ–¨–ö–û –ü–†–ò –°–¢–†–û–ì–û–ô –ù–ï–û–ë–•–û–î–ò–ú–û–°–¢–ò –£–í–ò–î–ï–¢–¨ –≠–ö–†–ê–ù –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø –ò –ù–ï –ò–°–ü–û–õ–¨–ó–û–í–ê–¢–¨ –ü–†–û–°–¢–û –¢–ê–ö!'
        }
      },
      required: ['script_name']
    },
    handler: async (params) => {
      const requestBody = {
        script_name: params.script_name,
        template_type: params.template_type || 'monobehaviour',
        namespace_name: params.namespace_name
      };
      
      return await handleUnityRequest('/api/create_script_template', requestBody, 15000);
    }
  },

  {
    name: "add_component_to_all",
    description: 'Unity Mass Component Adder - –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞ –Ω–∞ –º–Ω–æ–∂–µ—Å—Ç–≤–æ –æ–±—ä–µ–∫—Ç–æ–≤.\n\n‚úÖ –ü–û–î–î–ï–†–ñ–ò–í–ê–ï–¢–°–Ø:\n‚Ä¢ –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞ –Ω–∞ –≤—Å–µ –æ–±—ä–µ–∫—Ç—ã\n‚Ä¢ –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ —Ç–µ–≥–∞–º –∏ –∏–º–µ–Ω–∞–º\n‚Ä¢ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤\n‚Ä¢ –ú–∞—Å—Å–æ–≤–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ü–µ–Ω—ã\n\nüéØ –ü–†–ò–ú–ï–†–´:\n‚Ä¢ –î–æ–±–∞–≤–∏—Ç—å "Rigidbody" –Ω–∞ –≤—Å–µ –æ–±—ä–µ–∫—Ç—ã —Å —Ç–µ–≥–æ–º "Physics"\n‚Ä¢ –î–æ–±–∞–≤–∏—Ç—å "AudioSource" –Ω–∞ –≤—Å–µ –æ–±—ä–µ–∫—Ç—ã —Å –∏–º–µ–Ω–µ–º "Enemy"',
    inputSchema: {
      type: 'object',
      properties: {
        script_name: {
          type: 'string',
          description: '–ò–º—è —Å–∫—Ä–∏–ø—Ç–∞ (MonoBehaviour) –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è'
        },
        tag_filter: {
          type: 'string',
          description: '–§–∏–ª—å—Ç—Ä –ø–æ —Ç–µ–≥—É (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)'
        },
        name_filter: {
          type: 'string',
          description: '–§–∏–ª—å—Ç—Ä –ø–æ –∏–º–µ–Ω–∏ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)'
        },
        systemScreenshot: {
          type: 'boolean',
          default: false,
          description: 'üñ•Ô∏è –í–∫–ª—é—á–∏—Ç—å —Å–∫—Ä–∏–Ω—à–æ—Ç —Ä–∞–±–æ—á–µ–≥–æ —Å—Ç–æ–ª–∞. –ò–°–ü–û–õ–¨–ó–û–í–ê–¢–¨ –¢–û–õ–¨–ö–û –ü–†–ò –°–¢–†–û–ì–û–ô –ù–ï–û–ë–•–û–î–ò–ú–û–°–¢–ò –£–í–ò–î–ï–¢–¨ –≠–ö–†–ê–ù –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø –ò –ù–ï –ò–°–ü–û–õ–¨–ó–û–í–ê–¢–¨ –ü–†–û–°–¢–û –¢–ê–ö!'
        }
      },
      required: ['script_name']
    },
    handler: async (params) => {
      const requestBody = {
        script_name: params.script_name,
        tag_filter: params.tag_filter,
        name_filter: params.name_filter
      };
      
      return await handleUnityRequest('/api/add_component_to_all', requestBody, 20000);
    }
  },

  // ===== SCENE MANAGEMENT =====
  
  {
    name: "create_empty_scene",
    description: 'Unity Empty Scene Creator - —Å–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π –ø—É—Å—Ç–æ–π —Å—Ü–µ–Ω—ã.\n\n‚úÖ –ü–û–î–î–ï–†–ñ–ò–í–ê–ï–¢–°–Ø:\n‚Ä¢ –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π —Å—Ü–µ–Ω—ã\n‚Ä¢ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ\n‚Ä¢ –°–æ–∑–¥–∞–Ω–∏–µ –ø–∞–ø–∫–∏ Scenes\n‚Ä¢ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é\n\nüéØ –ü–†–ò–ú–ï–†–´:\n‚Ä¢ –°–æ–∑–¥–∞—Ç—å —Å—Ü–µ–Ω—É "MainMenu"\n‚Ä¢ –°–æ–∑–¥–∞—Ç—å —Å—Ü–µ–Ω—É "Level1"',
    inputSchema: {
      type: 'object',
      properties: {
        scene_name: {
          type: 'string',
          description: '–ò–º—è –Ω–æ–≤–æ–π —Å—Ü–µ–Ω—ã',
          default: 'New Scene'
        },
        systemScreenshot: {
          type: 'boolean',
          default: false,
          description: 'üñ•Ô∏è –í–∫–ª—é—á–∏—Ç—å —Å–∫—Ä–∏–Ω—à–æ—Ç —Ä–∞–±–æ—á–µ–≥–æ —Å—Ç–æ–ª–∞. –ò–°–ü–û–õ–¨–ó–û–í–ê–¢–¨ –¢–û–õ–¨–ö–û –ü–†–ò –°–¢–†–û–ì–û–ô –ù–ï–û–ë–•–û–î–ò–ú–û–°–¢–ò –£–í–ò–î–ï–¢–¨ –≠–ö–†–ê–ù –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø –ò –ù–ï –ò–°–ü–û–õ–¨–ó–û–í–ê–¢–¨ –ü–†–û–°–¢–û –¢–ê–ö!'
        }
      },
      required: []
    },
    handler: async (params) => {
      const requestBody = {
        scene_name: params.scene_name || 'New Scene'
      };
      
      return await handleUnityRequest('/api/create_empty_scene', requestBody, 15000);
    }
  },

  {
    name: "load_scene",
    description: 'Unity Scene Loader - –∑–∞–≥—Ä—É–∑–∫–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π —Å—Ü–µ–Ω—ã.\n\n‚úÖ –ü–û–î–î–ï–†–ñ–ò–í–ê–ï–¢–°–Ø:\n‚Ä¢ –ó–∞–≥—Ä—É–∑–∫–∞ —Å—Ü–µ–Ω—ã –ø–æ –ø—É—Ç–∏\n‚Ä¢ –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –º–µ–∂–¥—É —Å—Ü–µ–Ω–∞–º–∏\n‚Ä¢ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–π —Å—Ü–µ–Ω—ã\n\nüéØ –ü–†–ò–ú–ï–†–´:\n‚Ä¢ –ó–∞–≥—Ä—É–∑–∏—Ç—å —Å—Ü–µ–Ω—É "Assets/Scenes/MainMenu.unity"\n‚Ä¢ –ü–µ—Ä–µ–∫–ª—é—á–∏—Ç—å—Å—è –Ω–∞ —Å—Ü–µ–Ω—É "Level1"',
    inputSchema: {
      type: 'object',
      properties: {
        scene_path: {
          type: 'string',
          description: '–ü—É—Ç—å –∫ —Ñ–∞–π–ª—É —Å—Ü–µ–Ω—ã'
        },
        systemScreenshot: {
          type: 'boolean',
          default: false,
          description: 'üñ•Ô∏è –í–∫–ª—é—á–∏—Ç—å —Å–∫—Ä–∏–Ω—à–æ—Ç —Ä–∞–±–æ—á–µ–≥–æ —Å—Ç–æ–ª–∞. –ò–°–ü–û–õ–¨–ó–û–í–ê–¢–¨ –¢–û–õ–¨–ö–û –ü–†–ò –°–¢–†–û–ì–û–ô –ù–ï–û–ë–•–û–î–ò–ú–û–°–¢–ò –£–í–ò–î–ï–¢–¨ –≠–ö–†–ê–ù –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø –ò –ù–ï –ò–°–ü–û–õ–¨–ó–û–í–ê–¢–¨ –ü–†–û–°–¢–û –¢–ê–ö!'
        }
      },
      required: ['scene_path']
    },
    handler: async (params) => {
      const requestBody = {
        scene_path: params.scene_path
      };
      
      return await handleUnityRequest('/api/load_scene', requestBody, 15000);
    }
  },

  {
    name: "save_scene",
    description: 'Unity Scene Saver - —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–π —Å—Ü–µ–Ω—ã.\n\n‚úÖ –ü–û–î–î–ï–†–ñ–ò–í–ê–ï–¢–°–Ø:\n‚Ä¢ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–π —Å—Ü–µ–Ω—ã\n‚Ä¢ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ AssetDatabase\n‚Ä¢ –ü—Ä–æ–≤–µ—Ä–∫–∞ —É—Å–ø–µ—à–Ω–æ—Å—Ç–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è\n\nüéØ –ü–†–ò–ú–ï–†–´:\n‚Ä¢ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ç–µ–∫—É—â—É—é —Å—Ü–µ–Ω—É\n‚Ä¢ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ —Å—Ü–µ–Ω–µ',
    inputSchema: {
      type: 'object',
      properties: {
        systemScreenshot: {
          type: 'boolean',
          default: false,
          description: 'üñ•Ô∏è –í–∫–ª—é—á–∏—Ç—å —Å–∫—Ä–∏–Ω—à–æ—Ç —Ä–∞–±–æ—á–µ–≥–æ —Å—Ç–æ–ª–∞. –ò–°–ü–û–õ–¨–ó–û–í–ê–¢–¨ –¢–û–õ–¨–ö–û –ü–†–ò –°–¢–†–û–ì–û–ô –ù–ï–û–ë–•–û–î–ò–ú–û–°–¢–ò –£–í–ò–î–ï–¢–¨ –≠–ö–†–ê–ù –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø –ò –ù–ï –ò–°–ü–û–õ–¨–ó–û–í–ê–¢–¨ –ü–†–û–°–¢–û –¢–ê–ö!'
        }
      },
      required: []
    },
    handler: async (params) => {
      return await handleUnityRequest('/api/save_scene', {}, 10000);
    }
  }
];

export const unityModule = {
  name: 'unity',
  description: 'Unity Bridge: –ø—Ä–æ–∑—Ä–∞—á–Ω—ã–π –º–æ—Å—Ç AI ‚Üî Unity3D. –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –ª—é–±–æ–≥–æ C# –∫–æ–¥–∞, —Å–∫—Ä–∏–Ω—à–æ—Ç—ã, –∞–Ω–∞–ª–∏–∑ —Å—Ü–µ–Ω—ã.',
  tools: unityTools,
  
  decorators: {
    disableSystemInfo: true,
    disableDebugLogs: true
  }
}; 