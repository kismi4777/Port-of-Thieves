/**
 * üé® –°–ò–°–¢–ï–ú–ê –î–ï–ö–û–†–ê–¢–û–†–û–í - –ö–û–ú–ü–û–ó–ò–¶–ò–û–ù–ù–ê–Ø –ê–†–•–ò–¢–ï–ö–¢–£–†–ê
 * 
 * –î–µ–∫–æ—Ä–∞—Ç–æ—Ä—ã –ø–æ–∑–≤–æ–ª—è—é—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –¥–æ–±–∞–≤–ª—è—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
 * –∫ –æ—Ç–≤–µ—Ç–∞–º –≤—Å–µ—Ö –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤ –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏—è –∏—Ö –∫–æ–¥–∞
 */

import { exec } from 'child_process';
import { promisify } from 'util';
import { logError, logSuccess, logInfo, getFilteredLogs, clearBufferedLogs, LOG_LEVELS, DEFAULT_LOG_LEVEL } from './logger.js';
import { addContentToResult } from './responseHelpers.js';

// üîß –ü—Ä–æ—Å—Ç–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –¥–µ—Ç–∞–ª–µ–π –æ—à–∏–±–∫–∏
function extractErrorDetails(error) {
  return error?.message || error?.toString() || 'Unknown error';
}

const execAsync = promisify(exec);

// üé® –°–ò–°–¢–ï–ú–ê –î–ï–ö–û–†–ê–¢–û–†–û–í - –ö–†–ê–°–ò–í–ê–Ø –ö–û–ú–ü–û–ó–ò–¶–ò–Ø!
let decorators = [];

/**
 * üîß –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–û–ï –î–û–ë–ê–í–õ–ï–ù–ò–ï systemScreenshot –ü–ê–†–ê–ú–ï–¢–†–ê
 */
export function addSystemScreenshotParameter(toolConfig) {
  if (!toolConfig.inputSchema || !toolConfig.inputSchema.properties) {
    return toolConfig;
  }

  // –ï—Å–ª–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä —É–∂–µ –µ—Å—Ç—å, –Ω–µ –¥–æ–±–∞–≤–ª—è–µ–º
  if (toolConfig.inputSchema.properties.systemScreenshot) {
    return toolConfig;
  }

  return {
    ...toolConfig,
    inputSchema: {
      ...toolConfig.inputSchema,
      properties: {
        ...toolConfig.inputSchema.properties,
        systemScreenshot: {
          type: "boolean",
          default: false,
          description: "üñ•Ô∏è –í–∫–ª—é—á–∏—Ç—å —Å–∫—Ä–∏–Ω—à–æ—Ç —Ä–∞–±–æ—á–µ–≥–æ —Å—Ç–æ–ª–∞ –≤ –æ—Ç–≤–µ—Ç. –ò—Å–ø–æ–ª—å–∑—É–π –∫–æ–≥–¥–∞ —Ç–µ–ª–µ–ø–∞—Ç–∏—è –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç –∏ –Ω—É–∂–Ω–æ –†–ï–ê–õ–¨–ù–û —É–≤–∏–¥–µ—Ç—å —á—Ç–æ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –Ω–∞ —ç–∫—Ä–∞–Ω–µ!"
        }
      }
    }
  };
}

/**
 * üì∏ –°–û–ó–î–ê–ù–ò–ï –°–ö–†–ò–ù–®–û–¢–ê –°–ò–°–¢–ï–ú–´
 */
async function takeSystemScreenshot() {
  try {
    // –ò—Å–ø–æ–ª—å–∑—É–µ–º macOS screencapture –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Å–∫—Ä–∏–Ω—à–æ—Ç–∞
    const tempFile = `/tmp/screenshot_${Date.now()}.png`;
    await execAsync(`screencapture -x "${tempFile}"`);
    
    // –ß–∏—Ç–∞–µ–º —Ñ–∞–π–ª –∏ –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ base64
    const fs = await import('fs');
    const imageBuffer = await fs.promises.readFile(tempFile);
    const base64 = imageBuffer.toString('base64');
    
    // –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
    await fs.promises.unlink(tempFile);
    
    return base64;
  } catch (error) {
    logError(`Screenshot failed: ${extractErrorDetails(error)}`);
    return null;
  }
}

/**
 * üé® –ù–û–í–ê–Ø –ì–ò–ë–ö–ê–Ø –°–ò–°–¢–ï–ú–ê –î–ï–ö–û–†–ê–¢–û–†–û–í –° –§–£–ù–ö–¶–ò–Ø–ú–ò-–¢–†–ò–ì–ì–ï–†–ê–ú–ò!
 * 
 * –î–µ–∫–æ—Ä–∞—Ç–æ—Ä—ã —Ç–µ–ø–µ—Ä—å –ø–æ–ª—É—á–∞—é—Ç –§–£–ù–ö–¶–ò–Æ –ø–µ—Ä–≤—ã–º –∞—Ä–≥—É–º–µ–Ω—Ç–æ–º, —á—Ç–æ –ø–æ–∑–≤–æ–ª—è–µ—Ç:
 * - üìä –ú–µ—Ä–∏—Ç—å –ø–µ—Ä—Ñ–æ—Ä–º–∞–Ω—Å (–¥–æ –∏ –ø–æ—Å–ª–µ –≤—ã–∑–æ–≤–∞)
 * - üîí –î–æ–±–∞–≤–ª—è—Ç—å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é (–ø—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–µ—Ä–µ–¥ –≤—ã–∑–æ–≤–æ–º)
 * - üõ°Ô∏è –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –æ—à–∏–±–∫–∏ (try/catch –≤–æ–∫—Ä—É–≥ –≤—ã–∑–æ–≤–∞)
 * - üìù –õ–æ–≥–∏—Ä–æ–≤–∞—Ç—å (–¥–æ, –≤–æ –≤—Ä–µ–º—è, –ø–æ—Å–ª–µ)
 * - üîÑ –†–µ—Ç—Ä–∞–∏ (–ø–æ–≤—Ç–æ—Ä–∏—Ç—å –ø—Ä–∏ –æ—à–∏–±–∫–µ)
 * 
 * –ü–æ—Ä—è–¥–æ–∫ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è (–æ–±—ë—Ä—Ç–∫–∏):
 * 1. System decorators (–≥–ª–æ–±–∞–ª—å–Ω—ã–µ) - –≤–Ω–µ—à–Ω–∏–π —Å–ª–æ–π
 * 2. Module decorators (–¥–ª—è –≤—Å–µ–≥–æ –º–æ–¥—É–ª—è) - —Å—Ä–µ–¥–Ω–∏–π —Å–ª–æ–π
 * 3. Tool decorators (—Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ –¥–ª—è –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞) - –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π —Å–ª–æ–π
 * 4. Original handler - —è–¥—Ä–æ
 */
export async function applyDecorators(originalFunc, args, toolDecorators = [], moduleDecorators = []) {
  // üêõ DEBUG: –õ–æ–≥–∏—Ä—É–µ–º —á—Ç–æ –ø–æ–ª—É—á–∏–ª–∏
  logInfo(`üé® APPLY DECORATORS START: Tool=${toolDecorators.length}, Module=${moduleDecorators.length}, System=${decorators.length}`);

  // üî• –°–û–ó–î–ê–Å–ú –¶–ï–ü–û–ß–ö–£ –û–ë–Å–†–¢–û–ö (–æ—Ç –≤–Ω—É—Ç—Ä–µ–Ω–Ω–µ–π –∫ –≤–Ω–µ—à–Ω–µ–π)
  let wrappedFunc = originalFunc;

  // üîß 1. TOOL-LEVEL DECORATORS (—Å–∞–º—ã–π –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π —Å–ª–æ–π)
  if (toolDecorators.length > 0) {
    logInfo(`üîß Wrapping with ${toolDecorators.length} tool decorators...`);
    for (const decorator of toolDecorators.reverse()) { // –û–±—Ä–∞—Ç–Ω—ã–π –ø–æ—Ä—è–¥–æ–∫ –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –≤–ª–æ–∂–µ–Ω–Ω–æ—Å—Ç–∏
      const currentFunc = wrappedFunc;
      wrappedFunc = async () => {
        logInfo(`üîß Executing tool decorator: ${decorator.name || 'anonymous'}`);
        return await decorator(currentFunc, args);
      };
    }
  } else {
    logInfo(`üîß No tool decorators to apply`);
  }

  // üé≠ 2. MODULE-LEVEL DECORATORS (—Å—Ä–µ–¥–Ω–∏–π —Å–ª–æ–π)
  if (moduleDecorators.length > 0) {
    logInfo(`üé≠ Wrapping with ${moduleDecorators.length} module decorators...`);
    for (const decorator of moduleDecorators.reverse()) { // –û–±—Ä–∞—Ç–Ω—ã–π –ø–æ—Ä—è–¥–æ–∫ –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –≤–ª–æ–∂–µ–Ω–Ω–æ—Å—Ç–∏
      const currentFunc = wrappedFunc;
      wrappedFunc = async () => {
        logInfo(`üé≠ Executing module decorator: ${decorator.name || 'anonymous'}`);
        return await decorator(currentFunc, args);
      };
    }
  } else {
    logInfo(`üé≠ No module decorators to apply`);
  }

  // üñ•Ô∏è 3. SYSTEM-LEVEL DECORATORS (—Å–∞–º—ã–π –≤–Ω–µ—à–Ω–∏–π —Å–ª–æ–π)
  for (const decorator of decorators.slice().reverse()) { // –û–±—Ä–∞—Ç–Ω—ã–π –ø–æ—Ä—è–¥–æ–∫ –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –≤–ª–æ–∂–µ–Ω–Ω–æ—Å—Ç–∏
    const currentFunc = wrappedFunc;
    wrappedFunc = async () => {
      return await decorator(currentFunc, args);
    };
  }

  // üöÄ –í–´–ü–û–õ–ù–Ø–ï–ú –§–ò–ù–ê–õ–¨–ù–£–Æ –û–ë–Å–†–ù–£–¢–£–Æ –§–£–ù–ö–¶–ò–Æ
  return await wrappedFunc();
}

/**
 * üîß –£–ü–†–ê–í–õ–ï–ù–ò–ï –î–ï–ö–û–†–ê–¢–û–†–ê–ú–ò
 */
export function addDecorator(decorator) {
  decorators.push(decorator);
}

export function removeDecorator(decorator) {
  const index = decorators.indexOf(decorator);
  if (index > -1) {
    decorators.splice(index, 1);
  }
}

export function clearDecorators() {
  decorators = [];
}

export function getActiveDecorators() {
  return decorators.map(d => d.name || 'anonymous');
}

/**
 * üñºÔ∏è –î–ï–ö–û–†–ê–¢–û–† –°–ö–†–ò–ù–®–û–¢–û–í (–ù–û–í–ê–Ø –ê–†–•–ò–¢–ï–ö–¢–£–†–ê)
 */
const screenshotDecorator = async (callOriginalFunc, args) => {
  // üöÄ –°–Ω–∞—á–∞–ª–∞ –≤—ã–ø–æ–ª–Ω—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é
  const result = await callOriginalFunc();

  // üì∏ –ü–æ—Ç–æ–º –¥–æ–±–∞–≤–ª—è–µ–º —Å–∫—Ä–∏–Ω—à–æ—Ç –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
  if (args?.systemScreenshot) {
    const screenshot = await takeSystemScreenshot();
    if (screenshot) {
      return addContentToResult(result, {
        type: "image",
        data: screenshot,
        mimeType: "image/png"
      });
    }
  }
  return result;
};

/**
 * üî• –ö–†–£–¢–û–ô –î–ï–ö–û–†–ê–¢–û–† –°–ò–°–¢–ï–ú–ù–û–ô –ò–ù–§–û–†–ú–ê–¶–ò–ò –° –ü–û–†–¢–ê–ú–ò –ò –ü–†–û–¶–ï–°–°–ê–ú–ò!
 * –ù–∞ –±–∞–∑–µ system_info –∏–∑ terminal.js - –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ä–µ–∞–ª—å–Ω–æ –ø–æ–ª–µ–∑–Ω—É—é –∏–Ω—Ñ—É!
 * (–ù–û–í–ê–Ø –ê–†–•–ò–¢–ï–ö–¢–£–†–ê)
 */
const advancedSystemInfoDecorator = async (callOriginalFunc, args) => {
  // üöÄ –°–Ω–∞—á–∞–ª–∞ –≤—ã–ø–æ–ª–Ω—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é
  const result = await callOriginalFunc();
  try {
    // –í—Ä–µ–º—è –≤ MSK
    const now = new Date();
    const mskTime = new Intl.DateTimeFormat('ru-RU', {
      timeZone: 'Europe/Moscow',
      year: 'numeric',
      month: '2-digit',
      day: '2-digit',
      hour: '2-digit',
      minute: '2-digit',
      second: '2-digit'
    }).format(now);

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ—Ä—Ç–æ–≤ (Windows/Unix)
    const checkPort = async (port) => {
      try {
        const isWindows = process.platform === 'win32';
        const command = isWindows 
          ? `powershell -Command "netstat -an | Select-String ':${port}'"`
          : `lsof -i :${port}`;
        
        const { stdout } = await execAsync(command);
        return stdout.trim() ? 'üü¢ ACTIVE' : 'üî¥ CLOSED';
      } catch {
        return 'üî¥ CLOSED';
      }
    };

    const ports = {
      1337: await checkPort(1337),
      3000: await checkPort(3000),
      3001: await checkPort(3001), // VS Code Bridge
      8080: await checkPort(8080),
      5000: await checkPort(5000)
    };

    // –ü—Ä–æ—Ü–µ—Å—Å—ã Node.js (Windows/Unix)
    let nodeProcesses = 0;
    try {
      const isWindows = process.platform === 'win32';
      const command = isWindows 
        ? 'tasklist /FI "IMAGENAME eq node.exe" /FO CSV | find /c "node.exe"'
        : 'pgrep -f node';
      
      const { stdout } = await execAsync(command);
      
      if (isWindows) {
        // Windows: find /c –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–æ–∫
        nodeProcesses = parseInt(stdout.trim()) || 0;
      } else {
        // Unix: pgrep –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ PID
        nodeProcesses = stdout.split('\n').filter(line => line.trim()).length;
      }
    } catch {
      nodeProcesses = 0;
    }

    // –ë–∞–∑–æ–≤–∞—è —Å–∏—Å—Ç–µ–º–Ω–∞—è –∏–Ω—Ñ–∞
    const memoryMB = Math.round(process.memoryUsage().rss / 1024 / 1024);
    const uptimeMin = Math.round(process.uptime() / 60 * 10) / 10;

    const systemInfo = `üî• **ADVANCED SYSTEM INFO** üî•

üïê **Time (MSK):** ${mskTime}

üåê **Port Status:**
  ‚Ä¢ 1337: ${ports[1337]}
  ‚Ä¢ 3000: ${ports[3000]}
  ‚Ä¢ 3001: ${ports[3001]} üî• VS Code Bridge
  ‚Ä¢ 8080: ${ports[8080]}
  ‚Ä¢ 5000: ${ports[5000]}

‚ö° **Node.js Processes:** ${nodeProcesses}`;

    return addContentToResult(result, {
      type: "text",
      text: systemInfo
    });
  } catch (error) {
    logError(`Advanced system info decorator failed: ${extractErrorDetails(error)}`);
    // Fallback –∫ –±–∞–∑–æ–≤–æ–π –∏–Ω—Ñ–µ –µ—Å–ª–∏ —á—Ç–æ-—Ç–æ —Å–ª–æ–º–∞–ª–æ—Å—å
    const fallbackInfo = `üñ•Ô∏è **BASIC SYSTEM INFO** üñ•Ô∏è

‚è∞ **Time:** ${new Date().toLocaleTimeString('ru-RU', { timeZone: 'Europe/Moscow' })}
üíª **Platform:** ${process.platform}
üü¢ **Node.js:** ${process.version}
üíæ **Memory:** ${Math.round(process.memoryUsage().rss / 1024 / 1024)}MB

‚ö†Ô∏è **Advanced info failed - using fallback**`;

    return addContentToResult(result, {
      type: "text",
      text: fallbackInfo
    });
  }
};

/**
 * üêõ DEBUG LOGS DECORATOR - –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –±—É—Ñ–µ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã–µ –ª–æ–≥–∏
 * –ë–µ—Ä–µ—Ç –ª–æ–≥–∏ –∏–∑ –±—É—Ñ–µ—Ä–∞ logger.js –∏ –¥–æ–±–∞–≤–ª—è–µ—Ç –∫–∞–∫ –æ—Ç–¥–µ–ª—å–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç
 * 
 * üéØ –ü–û –£–ú–û–õ–ß–ê–ù–ò–Æ –ü–û–ö–ê–ó–´–í–ê–ï–¢ –¢–û–õ–¨–ö–û ERROR –õ–û–ì–ò —á—Ç–æ–±—ã –Ω–µ –∑–∞—Å–∏—Ä–∞—Ç—å –∫–æ–Ω—Ç–µ–∫—Å—Ç!
 * –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –ª–æ–≥ –ª–µ–≤–µ–ª–æ–≤ –∏–º–ø–æ—Ä—Ç–∏—Ä—É—é—Ç—Å—è –∏–∑ logger.js
 * (–ù–û–í–ê–Ø –ê–†–•–ò–¢–ï–ö–¢–£–†–ê)
 */
const debugLogsDecorator = async (callOriginalFunc, args) => {
  // üöÄ –°–Ω–∞—á–∞–ª–∞ –≤—ã–ø–æ–ª–Ω—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é
  const response = await callOriginalFunc();
  // üéØ –ü–û–õ–£–ß–ê–ï–ú –£–ñ–ï –û–¢–§–ò–õ–¨–¢–†–û–í–ê–ù–ù–´–ï –õ–û–ì–ò –ò–ó LOGGER.JS!
  // TODO: –ö–æ–≥–¥–∞ –¥–µ–∫–æ—Ä–∞—Ç–æ—Ä—ã –Ω–∞—É—á–∞—Ç—Å—è –¥–æ–±–∞–≤–ª—è—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –≤ schema, –≤–µ—Ä–Ω—É—Ç—å args?.debugLogLevel
  const filteredLogs = getFilteredLogs(); // üî• –ò–°–ü–û–õ–¨–ó–£–ï–ú DEFAULT_LOG_LEVEL (ERROR)

  // –û—á–∏—â–∞–µ–º –±—É—Ñ–µ—Ä –í–°–ï–ì–î–ê –ø–æ—Å–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ (–ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ–º —É—Ç–µ—á–∫–∏ –ø–∞–º—è—Ç–∏)
  clearBufferedLogs();

  if (filteredLogs.length === 0) {
    return response; // –ù–µ—Ç –ª–æ–≥–æ–≤ –Ω—É–∂–Ω–æ–≥–æ —É—Ä–æ–≤–Ω—è - –Ω–∏—á–µ–≥–æ –Ω–µ –¥–æ–±–∞–≤–ª—è–µ–º
  }

  // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –ª–æ–≥–∏ –≤ –∫—Ä–∞—Å–∏–≤—ã–π —Ç–µ–∫—Å—Ç
  const logsText = filteredLogs.map(log =>
    `${log.level === 'ERROR' ? 'üî¥' : log.level === 'SUCCESS' ? 'üü¢' : log.level === 'DEBUG' ? 'üü°' : 'üîµ'} [${log.time}] ${log.level}: ${log.message}`
  ).join('\n');

  // –î–æ–±–∞–≤–ª—è–µ–º –ª–æ–≥–∏ –∫–∞–∫ –æ—Ç–¥–µ–ª—å–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç
  if (!response.content) {
    response.content = [];
  }

  response.content.push({
    type: "text",
    text: `\nüìã **DEBUG LOGS:**\n\`\`\`\n${logsText}\n\`\`\``
  });

  return response;
};

/**
 * üöÄ –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø –î–ï–ö–û–†–ê–¢–û–†–û–í –ü–û –£–ú–û–õ–ß–ê–ù–ò–Æ
 */
export function initializeDefaultDecorators() {
  clearDecorators();
  addDecorator(debugLogsDecorator); // üî• DEBUG –õ–û–ì–ò –ü–ï–†–í–´–ú–ò - —á—Ç–æ–±—ã –∑–∞—Ö–≤–∞—Ç–∏—Ç—å –≤—Å–µ –ª–æ–≥–∏!
  addDecorator(screenshotDecorator);
  //addDecorator(advancedSystemInfoDecorator); // üî• –ö–†–£–¢–û–ô –°–ò–°–¢–ï–ú–ù–´–ô –î–ï–ö–û–†–ê–¢–û–†!
  logSuccess('üé® Default decorators initialized: debugLogs + screenshot + advancedSystemInfo');
}

/**
 * üéØ –•–ï–õ–ü–ï–†–´ –î–õ–Ø –°–û–ó–î–ê–ù–ò–Ø –ö–ê–°–¢–û–ú–ù–´–• –î–ï–ö–û–†–ê–¢–û–†–û–í
 */

export function createBrowserDecorator(getBrowserState) {
  return async (callOriginalFunc, args) => {
    // üöÄ –°–Ω–∞—á–∞–ª–∞ –≤—ã–ø–æ–ª–Ω—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é
    const result = await callOriginalFunc();

    try {
      if (args?.includeBrowserState) {
        const browserState = await getBrowserState();
        return addContentToResult(result, {
          type: "text",
          text: `üåê **Browser State:**\n${JSON.stringify(browserState, null, 2)}`
        });
      }
      return result;
    } catch (error) {
      logError(`Browser decorator failed: ${extractErrorDetails(error)}`);
      return result;
    }
  };
}

export function createProcessDecorator(getProcessInfo) {
  return async (callOriginalFunc, args) => {
    // üöÄ –°–Ω–∞—á–∞–ª–∞ –≤—ã–ø–æ–ª–Ω—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é
    const result = await callOriginalFunc();

    try {
      if (args?.includeProcessInfo) {
        const processInfo = await getProcessInfo();
        return addContentToResult(result, {
          type: "text",
          text: `‚öôÔ∏è **Process Info:**\n${JSON.stringify(processInfo, null, 2)}`
        });
      }
      return result;
    } catch (error) {
      logError(`Process decorator failed: ${extractErrorDetails(error)}`);
      return result;
    }
  };
}

export function createMetricsDecorator(getMetrics) {
  return async (callOriginalFunc, args) => {
    // üöÄ –°–Ω–∞—á–∞–ª–∞ –≤—ã–ø–æ–ª–Ω—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é
    const result = await callOriginalFunc();

    try {
      if (args?.includeMetrics) {
        const metrics = await getMetrics();
        return addContentToResult(result, {
          type: "text",
          text: `üìä **Metrics:**\n${JSON.stringify(metrics, null, 2)}`
        });
      }
      return result;
    } catch (error) {
      logError(`Metrics decorator failed: ${extractErrorDetails(error)}`);
      return result;
    }
  };
}

export function createCustomDecorator(fieldName, getValue, addToText = false) {
  return async (callOriginalFunc, args) => {
    // üöÄ –°–Ω–∞—á–∞–ª–∞ –≤—ã–ø–æ–ª–Ω—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é
    const response = await callOriginalFunc();

    try {
      const value = typeof getValue === 'function' ? await getValue() : getValue;
      response[fieldName] = value;

      if (addToText && value && response.content[0]) {
        response.content[0].text += `\n\nüé® **${fieldName}:** ${JSON.stringify(value)}`;
      }
    } catch (error) {
      logError(`Custom decorator error for ${fieldName}: ${extractErrorDetails(error)}`);
    }
    return response;
  };
}

export function createTextDecorator(title, getData) {
  return async (callOriginalFunc, args) => {
    // üöÄ –°–Ω–∞—á–∞–ª–∞ –≤—ã–ø–æ–ª–Ω—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é
    const result = await callOriginalFunc();

    try {
      const data = typeof getData === 'function' ? await getData(args) : getData;
      if (data) {
        return addContentToResult(result, {
          type: "text",
          text: `${title}\n${typeof data === 'string' ? data : JSON.stringify(data, null, 2)}`
        });
      }
      return result;
    } catch (error) {
      logError(`Text decorator failed: ${extractErrorDetails(error)}`);
      return result;
    }
  };
}

export function createImageDecorator(condition, getImageData, mimeType = "image/png") {
  return async (callOriginalFunc, args) => {
    // üöÄ –°–Ω–∞—á–∞–ª–∞ –≤—ã–ø–æ–ª–Ω—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é
    const result = await callOriginalFunc();

    try {
      if (condition(args)) {
        const imageData = await getImageData(args);
        if (imageData) {
          return addContentToResult(result, {
            type: "image",
            data: imageData,
            mimeType
          });
        }
      }
      return result;
    } catch (error) {
      logError(`Image decorator failed: ${extractErrorDetails(error)}`);
      return result;
    }
  };
} 